{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/implement-event-sourcing.md","hash":"a6d9cd9b407786b8fc3fb77047cd4ecea4478f8c","modified":1677514814799},{"_id":"source/_posts/simple-api-with-rails.md","hash":"420a8504e6d8c390c3b5b8a67702f036a9ad1198","modified":1677514822029},{"_id":"source/_posts/data-mapper-pattern.md","hash":"f76d9c7308d9a6c7a1885903984f8e3d2abfe1ca","modified":1677514805714},{"_id":"source/_posts/create-alfred-encode-workflow.md","hash":"6d3d30faaf64aa272d2d8a10ae57d55074a86c51","modified":1677514793640},{"_id":"source/categories/index.md","hash":"445803ca306150116206deaf37e2d21e2698e974","modified":1677515018810},{"_id":"source/about/index.md","hash":"bd6af9b7aec820ffecaeedcb76caf85f9bc39dfd","modified":1673716872292},{"_id":"source/_posts/diary-2023-01-14.md","hash":"4db641159b081017d1361d3e0567f9cff3b300cb","modified":1677514843319},{"_id":"source/tags/index.md","hash":"997fb2a544bb1bdf0a88cb589149a4a3cdc1b48c","modified":1677514976156},{"_id":"source/_posts/create-alfred-encode-workflow/encode.png","hash":"ae9e403e9095bf934707b51655d6caaf02373e06","modified":1673710519106},{"_id":"source/_posts/create-alfred-encode-workflow/workflow.png","hash":"327e933d336c45a8a45f96915bd42c18b3bb2c03","modified":1673710519107},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1677512983265},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1677512983267},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1677512983265},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1677512983265},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1677512983267},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1677512983267},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1677512983267},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1677512983278},{"_id":"themes/next/_config.yml","hash":"00db6dfdd1170aa4059cefee07d47bdb0d58406f","modified":1677516581142},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1677512983270},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1677512983267},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1677512983265},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1677512983267},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1677512983265},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1677512983266},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1677512983266},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1677512983266},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1677512983266},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1677512983266},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1677512983266},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1677512983266},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1677512983266},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1677512983266},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1677512983268},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1677512983268},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1677512983268},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1677512983268},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1677512983268},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1677512983268},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1677512983268},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1677512983268},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1677512983268},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1677512983270},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1677512983270},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1677512983270},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1677512983270},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1677512983271},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1677512983271},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1677512983271},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1677512983271},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1677512983271},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1677512983271},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1677512983271},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1677512983271},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1677512983271},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1677512983271},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1677512983271},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1677512983271},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1677512983272},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1677512983272},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1677512983272},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1677512983272},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1677512983272},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1677512983272},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1677512983272},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1677512983278},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1677512983277},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1677512983278},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1677512983280},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1677512983278},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1677512983278},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1677512983278},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1677512983266},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1677512983266},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1677512983266},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1677512983266},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1677512983269},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1677512983268},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1677512983269},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1677512983269},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1677512983269},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1677512983269},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1677512983269},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1677512983269},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1677512983270},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1677512983270},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1677512983270},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1677512983270},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1677512983270},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1677512983272},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1677512983272},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1677512983272},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1677512983273},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1677512983273},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1677512983273},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1677512983274},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1677512983274},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1677512983275},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1677512983275},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1677512983275},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1677512983275},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1677512983278},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1677512983276},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1677512983275},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1677512983279},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1677512983279},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1677512983276},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1677512983279},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1677512983279},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1677512983277},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1677512983279},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1677512983279},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1677512983279},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1677512983280},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1677512983277},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1677512983280},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1677512983280},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1677512983280},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1677512983280},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1677512983280},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1677512983280},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1677512983280},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1677512983280},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1677512983280},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1677512983280},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1677512983280},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1677512983286},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1677512983281},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1677512983288},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1677512983289},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1677512983289},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1677512983289},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1677512983289},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1677512983289},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1677512983289},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1677512983289},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1677512983289},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1677512983289},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1677512983289},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1677512983289},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1677512983290},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1677512983290},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1677512983290},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1677512983290},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1677512983290},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1677512983290},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1677512983290},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1677512983290},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1677512983273},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1677512983291},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1677512983273},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1677512983273},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1677512983273},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"429bf440703efd274f3a23730a901d6d50071431","modified":1677515717044},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1677512983273},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1677512983273},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1677512983273},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1677512983274},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1677512983274},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1677512983274},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1677512983274},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1677512983274},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1677512983274},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1677512983274},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1677512983274},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1677512983274},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1677512983275},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1677512983274},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1677512983275},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1677512983275},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1677512983275},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1677512983275},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1677512983275},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1677512983275},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1677512983275},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1677512983276},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1677512983276},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1677512983276},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1677512983276},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1677512983276},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1677512983276},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1677512983276},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1677512983276},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1677512983276},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1677512983276},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1677512983277},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1677512983276},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1677512983277},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1677512983277},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1677512983277},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1677512983277},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1677512983277},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1677512983277},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1677512983278},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1677512983277},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1677512983278},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1677512983277},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1677512983278},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1677512983279},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1677512983279},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1677512983277},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1677512983279},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1677512983279},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1677512983277},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1677512983279},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1677512983279},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1677512983279},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1677512983279},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1677512983288},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1677512983288},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1677512983288},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1677512983288},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1677512983288},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1677512983290},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1677512983290},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1677512983284},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1677512983292},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1677512983292},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1677512983281},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1677512983281},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1677512983285},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1677512983281},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1677512983286},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1677512983286},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1677512983288},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1677512983288},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1677512983288},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1677512983288},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1677512983287},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1677512983287},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1677512983291},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1677512983283},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1677512983283},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1677512983283},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1677512983283},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1677512983283},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1677512983292},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1677512983283},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1677512983283},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1677512983284},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1677512983281},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1677512983284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1677512983284},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1677512983281},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1677512983281},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1677512983281},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1677512983281},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1677512983281},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1677512983281},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1677512983282},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1677512983283},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1677512983283},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1677512983282},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1677512983285},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1677512983283},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1677512983286},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1677512983283},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1677512983285},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1677512983286},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1677512983286},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1677512983286},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1677512983286},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1677512983286},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1677512983286},{"_id":"themes/next/source/images/avatar.jpg","hash":"bd274e69848e76b311a438c8dd0bfb4cf3bf3550","modified":1677513690334},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1677512983291},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1677512983292}],"Category":[{"name":"development","_id":"clen23zg90004wfm08blxglz9"},{"name":"macOS","_id":"clen23zgc000awfm0eyyr2iri"},{"name":"diary","_id":"clen23zgd000gwfm0612w1xzz"}],"Data":[],"Page":[{"title":"categories","date":"2023-02-27T16:23:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-28 00:23:23\ntype: categories\ncomments: false\n---\n","updated":"2023-02-27T16:23:38.810Z","path":"categories/index.html","layout":"page","_id":"clen23zg30000wfm04docesmp","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"About me","date":"2022-05-16T17:14:08.000Z","_content":"\n### 关于我\n\n废柴、家里蹲、服务端开发 (Python、Golang, (a little) Rust, Ruby, React)\n\n讨论技术 / 闲聊 / 交朋友，不要犹豫，请联系我:\n\ntwi: [@laipz8200](https://www.twitter.com/laipz8200)\nemail: <a href=\"mailto:laipz8200<laipz8200@outlook.com>\" target=\"_blank\">laipz8200@outlook.com</a>\n\n### 读书\n\n在读:\n\n* UNIX 编程艺术\n* UNIX 环境高级编程\n* 计算机程序的构造与解释\n\n读过:\n\n* 深入理解计算机系统\n* SQL 反模式\n* 数学之美\n* 领域驱动设计\n* 实现领域驱动设计 (Java)\n* 领域驱动设计与模式实战 (C#)\n* 松本行弘的程序世界 (Ruby)\n* 企业应用架构模式\n* 重构\n* 架构整洁之道\n","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2022-05-17 01:14:08\n---\n\n### 关于我\n\n废柴、家里蹲、服务端开发 (Python、Golang, (a little) Rust, Ruby, React)\n\n讨论技术 / 闲聊 / 交朋友，不要犹豫，请联系我:\n\ntwi: [@laipz8200](https://www.twitter.com/laipz8200)\nemail: <a href=\"mailto:laipz8200<laipz8200@outlook.com>\" target=\"_blank\">laipz8200@outlook.com</a>\n\n### 读书\n\n在读:\n\n* UNIX 编程艺术\n* UNIX 环境高级编程\n* 计算机程序的构造与解释\n\n读过:\n\n* 深入理解计算机系统\n* SQL 反模式\n* 数学之美\n* 领域驱动设计\n* 实现领域驱动设计 (Java)\n* 领域驱动设计与模式实战 (C#)\n* 松本行弘的程序世界 (Ruby)\n* 企业应用架构模式\n* 重构\n* 架构整洁之道\n","updated":"2023-01-14T17:21:12.292Z","path":"about/index.html","comments":1,"layout":"page","_id":"clen23zg70002wfm060qg0n3q","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>废柴、家里蹲、服务端开发 (Python、Golang, (a little) Rust, Ruby, React)</p>\n<p>讨论技术 &#x2F; 闲聊 &#x2F; 交朋友，不要犹豫，请联系我:</p>\n<p>twi: <a href=\"https://www.twitter.com/laipz8200\">@laipz8200</a><br>email: <a href=\"mailto:laipz8200<laipz8200@outlook.com>\" target=\"_blank\">laipz8200@outlook.com</a></p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>在读:</p>\n<ul>\n<li>UNIX 编程艺术</li>\n<li>UNIX 环境高级编程</li>\n<li>计算机程序的构造与解释</li>\n</ul>\n<p>读过:</p>\n<ul>\n<li>深入理解计算机系统</li>\n<li>SQL 反模式</li>\n<li>数学之美</li>\n<li>领域驱动设计</li>\n<li>实现领域驱动设计 (Java)</li>\n<li>领域驱动设计与模式实战 (C#)</li>\n<li>松本行弘的程序世界 (Ruby)</li>\n<li>企业应用架构模式</li>\n<li>重构</li>\n<li>架构整洁之道</li>\n</ul>\n","site":{"data":{}},"length":250,"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>废柴、家里蹲、服务端开发 (Python、Golang, (a little) Rust, Ruby, React)</p>\n<p>讨论技术 &#x2F; 闲聊 &#x2F; 交朋友，不要犹豫，请联系我:</p>\n<p>twi: <a href=\"https://www.twitter.com/laipz8200\">@laipz8200</a><br>email: <a href=\"mailto:laipz8200<laipz8200@outlook.com>\" target=\"_blank\">laipz8200@outlook.com</a></p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>在读:</p>\n<ul>\n<li>UNIX 编程艺术</li>\n<li>UNIX 环境高级编程</li>\n<li>计算机程序的构造与解释</li>\n</ul>\n<p>读过:</p>\n<ul>\n<li>深入理解计算机系统</li>\n<li>SQL 反模式</li>\n<li>数学之美</li>\n<li>领域驱动设计</li>\n<li>实现领域驱动设计 (Java)</li>\n<li>领域驱动设计与模式实战 (C#)</li>\n<li>松本行弘的程序世界 (Ruby)</li>\n<li>企业应用架构模式</li>\n<li>重构</li>\n<li>架构整洁之道</li>\n</ul>\n"},{"title":"tags","date":"2023-02-27T16:22:31.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-28 00:22:31\ntype: tags\ncomments: false\n---\n","updated":"2023-02-27T16:22:56.156Z","path":"tags/index.html","layout":"page","_id":"clen23zga0006wfm09cxzg0m4","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"数据映射器和模型-数据源分离","date":"2022-07-07T14:53:32.000Z","_content":"\n\n> 使用 Python 进行 web 开发时，很多人都会首先接触到 Django 这样的框架，Django ORM 提供了一种极为简单明了的与关系型数据库交互的方式。但当业务逻辑变得复杂时，关系模型和对象模型的差异总会给项目带来一些麻烦，\n>\n> 在这种情况下，可以使用一种叫做数据映射器 (Data Mapper) 的模式将对象模型和数据源隔离，使他们能够各自演变，这样一来，软件便可以健康地发展下去。\n\n<!-- more -->\n\n设想这样一种常见的情况：你需要建立一个「用户」模型，「用户」具有「真实姓名」和「昵称」，出于隐私考虑，一些「用户」可能不太愿意提供自己的「真实姓名」。在「用户」提供了「真实姓名」时，软件需要保证「用户」同时提供「姓氏」和「名字」，不能只有其中一样。\n\n聪明的你应该很快可以设计出这样一个模型:\n\n```python\nclass User:\n    first_name: str\n    last_name: str\n    nickname: str\n```\n\n乍一看，这个模型可以很好的工作，但我们很容易预见到在不久的将来，代码中将会充满着 `if first_name == '' or last_name == ''` 之类的判断，当这样的判断分布在程序各个地方时，代码很快就会变得难以维护，继而分崩离析。\n\n出现这种问题的根源在于这个模型中丢失了需求里的一个重要概念（如果你注意到了我在上面那段话中的括号）「真实姓名」。让我们试着改进这个模型:\n\n```python\nclass Name:\n    first_name: str\n    last_name: str\n\n\nclass User:\n    realname: Name\n    nickname: str\n```\n\n此时我们可以仅通过 `if realname is None` 完成同样的判断了。\n\n很可惜的是，即使是这样一个简单的需求，在使用 Django ORM 时也会遇到问题，Django ORM 和 Ruby on Rails 一样，在模型层使用 「活动记录模式」 ，这种模式的特点便是模型的一个属性正好对应到关系型数据库中表的一列，在关系模型可以描述的领域中，这种方式能够极大简化模型和存储层的关系，使得软件开发变得非常迅速，可是当模型中包含复杂的领域知识（特别是涉及到继承、组合等关系）时，问题就会变得难以处理，为此我们需要采用一种更有效的方式，将领域模型和存储层隔离，「数据映射器」便是一种常用的模式。\n\n数据映射器使用一个单独的映射器对象来处理领域模型和数据库内容的相互转换，将转换的过程封装，由此隔离领域层和存储层，在这种情况下，领域模型不需要知道存储层的任何信息，你可以轻易将 MySQL 替换为 PostgreSQL ，甚至换成 XML 或 MongoDB 等非关系型存储。\n\n在开始实现映射器前，让我们先完善一下这个例子中需要使用的简单模型:\n\n> 这里声明一下: 为了用尽可能少的代码进行说明，我不会采用严格的编码规范，也尽量不做提前设计，因此请不要试图将这里的示例代码直接在生产中使用。\n\n```python\n# data_mapper/domain/models.py\nfrom datetime import datetime\nfrom uuid import uuid4\n\n\nclass Name:\n    def __init__(self, first_name: str, last_name: str):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def __str__(self):\n        return f\"{self.first_name}·{self.last_name}\"\n\n\nclass User:\n    def __init__(self, id_: str, nickname: str, realname: Name | None):\n        self._id = id_\n        self.nickname = nickname\n        self.realname = realname\n\n    @property\n    def id(self) -> str:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return str(self.realname) if self.realname else self.nickname\n\n    def __str__(self):\n        return \"<User '%s'>\" % self.name\n\n\ndef new_user(nickname: str, realname: Name | None) -> User:\n    id_ = \"USER\" + datetime.utcnow().strftime(\"-%y-%m-%d-\") + str(uuid4())[:8]\n    return User(id_, nickname, realname)\n```\n\n为了给「用户」生成标识，额外添加了一个工厂方法，这会为我们之后的工作提供许多便利。\n\n接下来我们设置数据库，同样，为了保证代码的简单，这里不会引入标准库以外的内容:\n\n```python\n# data_mapper/db/connections.py\nimport sqlite3\n\nconn = sqlite3.connect(\":memory:\")\n\n\ndef dict_factory(cursor, row) -> dict:\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n\n\nconn.row_factory = dict_factory\n\n\ndef init_db(conn):\n    ddl = \"\"\"CREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\"\"\"\n    conn.execute(ddl)\n\n\nconn.set_trace_callback(print)\ninit_db(conn)\n```\n\n接下来终于可以开始编写我们的映射器了，我们首先实现一个能够将数据保存到数据库的方法:\n\n```python\n# data_mapper/db/mappers.py\nfrom data_mapper.domain.models import User\n\nfrom .connections import conn\n\n\nclass UserMapper:\n    tablename: str = \"users\"\n    columns: str = \"id, first_name, last_name, nickname\"\n    insert_statement: str = (\n        f\"INSERT INTO {tablename}({columns}) VALUES ($1, $2, $3, $4)\"\n    )\n\n    def insert(self, user: User) -> str:\n        statement = self.insert_statement\n        cursor = conn.cursor()\n        try:\n            cursor.execute(statement, self.insert_data(user))\n            conn.commit()\n            return user.id\n        finally:\n            cursor.close()\n\n    def insert_data(self, user: User) -> tuple:\n        if user.realname:\n            return (\n                user.id,\n                user.realname.first_name,\n                user.realname.last_name,\n                user.nickname,\n            )\n        return (user.id, None, None, user.nickname)\n```\n\n我们可以运行一个简单的测试来看看它是否能够工作:\n\n```python\nfrom data_mapper.db.connections import conn\nfrom data_mapper.db.mappers import UserMapper\nfrom data_mapper.domain.models import Name, new_user\n\nmapper = UserMapper()\n\nuser = new_user(\"Tom\", Name(\"Tom\", \"Jackson\"))\nmapper.insert(user)\n\ncursor = conn.cursor()\nrows = cursor.execute(\"SELECT * FROM users;\").fetchall()\nprint(rows)\ncursor.close()\n```\n\n得到的结果是:\n\n```\n--------------------\nCREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\nBEGIN\nINSERT INTO users(id, first_name, last_name, nickname) VALUES ($1, $2, $3, $4)\nCOMMIT\nSELECT * FROM users;\n[{'id': 'USER-22-07-07-11dd6b13', 'first_name': 'Tom', 'last_name': 'Jackson', 'nickname': 'Tom'}]\n\n[Done] exited with code=0 in 0.025294 seconds\n```\n\n一切顺利，接下来我们实现根据主键获取「用户」的方法:\n\n```python\nclass UserMapper:\n\n    ...\n\n    find_statement: str = f\"SELECT {columns} FROM {tablename} WHERE id = $1 LIMIT 1\"\n\n    def find(self, id_: str) -> User:\n        statement = self.find_statement\n        cursor = conn.cursor()\n        try:\n            rs = cursor.execute(statement, (id_,)).fetchone()\n            if rs is None:\n                raise KeyError(f\"{id_} is not exists\")\n            return self.load(rs)\n        finally:\n            cursor.close()\n\n    def load(self, rs: dict) -> User:\n        id_ = rs[\"id\"]\n        return self.do_load(id_, rs)\n\n    def do_load(self, id_: str, rs: dict) -> User:\n        first_name = rs[\"first_name\"]\n        last_name = rs[\"last_name\"]\n        nickname = rs[\"nickname\"]\n        if first_name and last_name:\n            return User(id_, nickname, Name(first_name, last_name))\n        return User(id_, nickname, None)\n```\n\n测试一下效果:\n\n```python\nmapper = UserMapper()\n\nuser = new_user(\"Tom\", Name(\"Tom\", \"Jackson\"))\nmapper.insert(user)\n\nuser = mapper.find(user.id)\nprint(user)\n```\n\n结果:\n\n```\n--------------------\nCREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\nBEGIN\nINSERT INTO users(id, first_name, last_name, nickname) VALUES ($1, $2, $3, $4)\nCOMMIT\nSELECT id, first_name, last_name, nickname FROM users WHERE id = $1 LIMIT 1\n<User 'Tom·Jackson'>\n\n[Done] exited with code=0 in 0.028210 seconds\n```\n\n对于「用户」模型，到这里其实就可以结束了，但你可能注意到在 `find()` 方法的下面有几个看起来有些多余的方法，这是为了接下来的抽象预留的方法，下面我们开始对可以在多个模型间共享的方法进行抽象。\n\n首先对模型本身提取出 `id` 标识:\n\n```python\n# data_mapper/domain/models.py\nclass DomainObject:\n    def __init__(self, id_: str):\n        self._id = id_\n\n    @property\n    def id(self) -> str:\n        return self._id\n\n\nclass User(DomainObject):\n    def __init__(self, id_: str, nickname: str, realname: Name | None):\n        super().__init__(id_)\n        ...\n\n    ...\n```\n\n然后是映射器:\n\n```python\n# data_mapper/db/mappers.py\n...\n\nModelType = TypeVar(\"ModelType\", bound=DomainObject)\n\n\nclass AbstractMapper(ABC, Generic[ModelType]):\n    loaded_map: dict[str, ModelType] = {}\n\n    @property\n    @abstractmethod\n    def find_statement(self) -> str:\n        ...\n\n    @property\n    @abstractmethod\n    def insert_statement(self) -> str:\n        ...\n\n    def insert(self, subject: ModelType) -> str:\n        statement = self.insert_statement\n        cursor = conn.cursor()\n        try:\n            cursor.execute(statement, self.insert_data(subject))\n            conn.commit()\n            self.loaded_map[subject.id] = subject\n            return subject.id\n        finally:\n            cursor.close()\n\n    @abstractmethod\n    def insert_data(self, subject: ModelType) -> tuple:\n        ...\n\n    def find(self, id_: str) -> ModelType:\n        if id_ in self.loaded_map:\n            return self.loaded_map[id_]\n        statement = self.find_statement\n        cursor = conn.cursor()\n        try:\n            rs = cursor.execute(statement, (id_,)).fetchone()\n            if rs is None:\n                raise KeyError(f\"{id_} is not exists\")\n            return self.load(rs)\n        finally:\n            cursor.close()\n\n    def load(self, rs: dict) -> ModelType:\n        id_ = rs[\"id\"]\n        if id_ in self.loaded_map:\n            return self.loaded_map[id_]\n        return self.do_load(id_, rs)\n\n    @abstractmethod\n    def do_load(self, id_: str, rs: dict) -> ModelType:\n        ...\n\n\nclass UserMapper(AbstractMapper[User]):\n    tablename: str = \"users\"\n    columns: str = \"id, first_name, last_name, nickname\"\n\n    @property\n    def insert_statement(self) -> str:\n        return f\"INSERT INTO {self.tablename}({self.columns}) VALUES ($1, $2, $3, $4)\"\n\n    @property\n    def find_statement(self) -> str:\n        return f\"SELECT {self.columns} FROM {self.tablename} WHERE id = $1 LIMIT 1\"\n\n    def insert_data(self, user: User) -> tuple:\n        if user.realname:\n            return (\n                user.id,\n                user.realname.first_name,\n                user.realname.last_name,\n                user.nickname,\n            )\n        return (user.id, None, None, user.nickname)\n\n    def do_load(self, id_: str, rs: dict) -> User:\n        first_name = rs[\"first_name\"]\n        last_name = rs[\"last_name\"]\n        nickname = rs[\"nickname\"]\n        if first_name and last_name:\n            return User(id_, nickname, Name(first_name, last_name))\n        return User(id_, nickname, None)\n```\n\n经过提取后，大部分查询逻辑和数据库交互均转移到了 `AbstractMapper` ，具体的映射器只需要实现部分与具体模型相关的功能即可。此外，我在映射器中添加了一个标识映射，用来避免重复的数据库交互。\n\n我们重新运行代码，得到的结果是:\n\n```python\n--------------------\nCREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\nBEGIN\nINSERT INTO users(id, first_name, last_name, nickname) VALUES ($1, $2, $3, $4)\nCOMMIT\n<User 'Tom·Jackson'>\n\n[Done] exited with code=0 in 0.030054 seconds\n```\n\n观察软件执行的 SQL 语句，可以发现 `find()` 方法并没有真的执行查询，这是由于调用 `insert()` 方法时对象已经被保存到标识映射中了。\n","source":"_posts/data-mapper-pattern.md","raw":"---\ntitle: 数据映射器和模型-数据源分离\ndate: 2022-07-07 22:53:32\ncategory: development\ntags:\n  - data mapper\n  - 数据映射器\n  - 领域模型\n  - 企业应用架构模式\n---\n\n\n> 使用 Python 进行 web 开发时，很多人都会首先接触到 Django 这样的框架，Django ORM 提供了一种极为简单明了的与关系型数据库交互的方式。但当业务逻辑变得复杂时，关系模型和对象模型的差异总会给项目带来一些麻烦，\n>\n> 在这种情况下，可以使用一种叫做数据映射器 (Data Mapper) 的模式将对象模型和数据源隔离，使他们能够各自演变，这样一来，软件便可以健康地发展下去。\n\n<!-- more -->\n\n设想这样一种常见的情况：你需要建立一个「用户」模型，「用户」具有「真实姓名」和「昵称」，出于隐私考虑，一些「用户」可能不太愿意提供自己的「真实姓名」。在「用户」提供了「真实姓名」时，软件需要保证「用户」同时提供「姓氏」和「名字」，不能只有其中一样。\n\n聪明的你应该很快可以设计出这样一个模型:\n\n```python\nclass User:\n    first_name: str\n    last_name: str\n    nickname: str\n```\n\n乍一看，这个模型可以很好的工作，但我们很容易预见到在不久的将来，代码中将会充满着 `if first_name == '' or last_name == ''` 之类的判断，当这样的判断分布在程序各个地方时，代码很快就会变得难以维护，继而分崩离析。\n\n出现这种问题的根源在于这个模型中丢失了需求里的一个重要概念（如果你注意到了我在上面那段话中的括号）「真实姓名」。让我们试着改进这个模型:\n\n```python\nclass Name:\n    first_name: str\n    last_name: str\n\n\nclass User:\n    realname: Name\n    nickname: str\n```\n\n此时我们可以仅通过 `if realname is None` 完成同样的判断了。\n\n很可惜的是，即使是这样一个简单的需求，在使用 Django ORM 时也会遇到问题，Django ORM 和 Ruby on Rails 一样，在模型层使用 「活动记录模式」 ，这种模式的特点便是模型的一个属性正好对应到关系型数据库中表的一列，在关系模型可以描述的领域中，这种方式能够极大简化模型和存储层的关系，使得软件开发变得非常迅速，可是当模型中包含复杂的领域知识（特别是涉及到继承、组合等关系）时，问题就会变得难以处理，为此我们需要采用一种更有效的方式，将领域模型和存储层隔离，「数据映射器」便是一种常用的模式。\n\n数据映射器使用一个单独的映射器对象来处理领域模型和数据库内容的相互转换，将转换的过程封装，由此隔离领域层和存储层，在这种情况下，领域模型不需要知道存储层的任何信息，你可以轻易将 MySQL 替换为 PostgreSQL ，甚至换成 XML 或 MongoDB 等非关系型存储。\n\n在开始实现映射器前，让我们先完善一下这个例子中需要使用的简单模型:\n\n> 这里声明一下: 为了用尽可能少的代码进行说明，我不会采用严格的编码规范，也尽量不做提前设计，因此请不要试图将这里的示例代码直接在生产中使用。\n\n```python\n# data_mapper/domain/models.py\nfrom datetime import datetime\nfrom uuid import uuid4\n\n\nclass Name:\n    def __init__(self, first_name: str, last_name: str):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def __str__(self):\n        return f\"{self.first_name}·{self.last_name}\"\n\n\nclass User:\n    def __init__(self, id_: str, nickname: str, realname: Name | None):\n        self._id = id_\n        self.nickname = nickname\n        self.realname = realname\n\n    @property\n    def id(self) -> str:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return str(self.realname) if self.realname else self.nickname\n\n    def __str__(self):\n        return \"<User '%s'>\" % self.name\n\n\ndef new_user(nickname: str, realname: Name | None) -> User:\n    id_ = \"USER\" + datetime.utcnow().strftime(\"-%y-%m-%d-\") + str(uuid4())[:8]\n    return User(id_, nickname, realname)\n```\n\n为了给「用户」生成标识，额外添加了一个工厂方法，这会为我们之后的工作提供许多便利。\n\n接下来我们设置数据库，同样，为了保证代码的简单，这里不会引入标准库以外的内容:\n\n```python\n# data_mapper/db/connections.py\nimport sqlite3\n\nconn = sqlite3.connect(\":memory:\")\n\n\ndef dict_factory(cursor, row) -> dict:\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n\n\nconn.row_factory = dict_factory\n\n\ndef init_db(conn):\n    ddl = \"\"\"CREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\"\"\"\n    conn.execute(ddl)\n\n\nconn.set_trace_callback(print)\ninit_db(conn)\n```\n\n接下来终于可以开始编写我们的映射器了，我们首先实现一个能够将数据保存到数据库的方法:\n\n```python\n# data_mapper/db/mappers.py\nfrom data_mapper.domain.models import User\n\nfrom .connections import conn\n\n\nclass UserMapper:\n    tablename: str = \"users\"\n    columns: str = \"id, first_name, last_name, nickname\"\n    insert_statement: str = (\n        f\"INSERT INTO {tablename}({columns}) VALUES ($1, $2, $3, $4)\"\n    )\n\n    def insert(self, user: User) -> str:\n        statement = self.insert_statement\n        cursor = conn.cursor()\n        try:\n            cursor.execute(statement, self.insert_data(user))\n            conn.commit()\n            return user.id\n        finally:\n            cursor.close()\n\n    def insert_data(self, user: User) -> tuple:\n        if user.realname:\n            return (\n                user.id,\n                user.realname.first_name,\n                user.realname.last_name,\n                user.nickname,\n            )\n        return (user.id, None, None, user.nickname)\n```\n\n我们可以运行一个简单的测试来看看它是否能够工作:\n\n```python\nfrom data_mapper.db.connections import conn\nfrom data_mapper.db.mappers import UserMapper\nfrom data_mapper.domain.models import Name, new_user\n\nmapper = UserMapper()\n\nuser = new_user(\"Tom\", Name(\"Tom\", \"Jackson\"))\nmapper.insert(user)\n\ncursor = conn.cursor()\nrows = cursor.execute(\"SELECT * FROM users;\").fetchall()\nprint(rows)\ncursor.close()\n```\n\n得到的结果是:\n\n```\n--------------------\nCREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\nBEGIN\nINSERT INTO users(id, first_name, last_name, nickname) VALUES ($1, $2, $3, $4)\nCOMMIT\nSELECT * FROM users;\n[{'id': 'USER-22-07-07-11dd6b13', 'first_name': 'Tom', 'last_name': 'Jackson', 'nickname': 'Tom'}]\n\n[Done] exited with code=0 in 0.025294 seconds\n```\n\n一切顺利，接下来我们实现根据主键获取「用户」的方法:\n\n```python\nclass UserMapper:\n\n    ...\n\n    find_statement: str = f\"SELECT {columns} FROM {tablename} WHERE id = $1 LIMIT 1\"\n\n    def find(self, id_: str) -> User:\n        statement = self.find_statement\n        cursor = conn.cursor()\n        try:\n            rs = cursor.execute(statement, (id_,)).fetchone()\n            if rs is None:\n                raise KeyError(f\"{id_} is not exists\")\n            return self.load(rs)\n        finally:\n            cursor.close()\n\n    def load(self, rs: dict) -> User:\n        id_ = rs[\"id\"]\n        return self.do_load(id_, rs)\n\n    def do_load(self, id_: str, rs: dict) -> User:\n        first_name = rs[\"first_name\"]\n        last_name = rs[\"last_name\"]\n        nickname = rs[\"nickname\"]\n        if first_name and last_name:\n            return User(id_, nickname, Name(first_name, last_name))\n        return User(id_, nickname, None)\n```\n\n测试一下效果:\n\n```python\nmapper = UserMapper()\n\nuser = new_user(\"Tom\", Name(\"Tom\", \"Jackson\"))\nmapper.insert(user)\n\nuser = mapper.find(user.id)\nprint(user)\n```\n\n结果:\n\n```\n--------------------\nCREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\nBEGIN\nINSERT INTO users(id, first_name, last_name, nickname) VALUES ($1, $2, $3, $4)\nCOMMIT\nSELECT id, first_name, last_name, nickname FROM users WHERE id = $1 LIMIT 1\n<User 'Tom·Jackson'>\n\n[Done] exited with code=0 in 0.028210 seconds\n```\n\n对于「用户」模型，到这里其实就可以结束了，但你可能注意到在 `find()` 方法的下面有几个看起来有些多余的方法，这是为了接下来的抽象预留的方法，下面我们开始对可以在多个模型间共享的方法进行抽象。\n\n首先对模型本身提取出 `id` 标识:\n\n```python\n# data_mapper/domain/models.py\nclass DomainObject:\n    def __init__(self, id_: str):\n        self._id = id_\n\n    @property\n    def id(self) -> str:\n        return self._id\n\n\nclass User(DomainObject):\n    def __init__(self, id_: str, nickname: str, realname: Name | None):\n        super().__init__(id_)\n        ...\n\n    ...\n```\n\n然后是映射器:\n\n```python\n# data_mapper/db/mappers.py\n...\n\nModelType = TypeVar(\"ModelType\", bound=DomainObject)\n\n\nclass AbstractMapper(ABC, Generic[ModelType]):\n    loaded_map: dict[str, ModelType] = {}\n\n    @property\n    @abstractmethod\n    def find_statement(self) -> str:\n        ...\n\n    @property\n    @abstractmethod\n    def insert_statement(self) -> str:\n        ...\n\n    def insert(self, subject: ModelType) -> str:\n        statement = self.insert_statement\n        cursor = conn.cursor()\n        try:\n            cursor.execute(statement, self.insert_data(subject))\n            conn.commit()\n            self.loaded_map[subject.id] = subject\n            return subject.id\n        finally:\n            cursor.close()\n\n    @abstractmethod\n    def insert_data(self, subject: ModelType) -> tuple:\n        ...\n\n    def find(self, id_: str) -> ModelType:\n        if id_ in self.loaded_map:\n            return self.loaded_map[id_]\n        statement = self.find_statement\n        cursor = conn.cursor()\n        try:\n            rs = cursor.execute(statement, (id_,)).fetchone()\n            if rs is None:\n                raise KeyError(f\"{id_} is not exists\")\n            return self.load(rs)\n        finally:\n            cursor.close()\n\n    def load(self, rs: dict) -> ModelType:\n        id_ = rs[\"id\"]\n        if id_ in self.loaded_map:\n            return self.loaded_map[id_]\n        return self.do_load(id_, rs)\n\n    @abstractmethod\n    def do_load(self, id_: str, rs: dict) -> ModelType:\n        ...\n\n\nclass UserMapper(AbstractMapper[User]):\n    tablename: str = \"users\"\n    columns: str = \"id, first_name, last_name, nickname\"\n\n    @property\n    def insert_statement(self) -> str:\n        return f\"INSERT INTO {self.tablename}({self.columns}) VALUES ($1, $2, $3, $4)\"\n\n    @property\n    def find_statement(self) -> str:\n        return f\"SELECT {self.columns} FROM {self.tablename} WHERE id = $1 LIMIT 1\"\n\n    def insert_data(self, user: User) -> tuple:\n        if user.realname:\n            return (\n                user.id,\n                user.realname.first_name,\n                user.realname.last_name,\n                user.nickname,\n            )\n        return (user.id, None, None, user.nickname)\n\n    def do_load(self, id_: str, rs: dict) -> User:\n        first_name = rs[\"first_name\"]\n        last_name = rs[\"last_name\"]\n        nickname = rs[\"nickname\"]\n        if first_name and last_name:\n            return User(id_, nickname, Name(first_name, last_name))\n        return User(id_, nickname, None)\n```\n\n经过提取后，大部分查询逻辑和数据库交互均转移到了 `AbstractMapper` ，具体的映射器只需要实现部分与具体模型相关的功能即可。此外，我在映射器中添加了一个标识映射，用来避免重复的数据库交互。\n\n我们重新运行代码，得到的结果是:\n\n```python\n--------------------\nCREATE TABLE IF NOT EXISTS users(\n    id         TEXT PRIMARY KEY,\n    first_name TEXT,\n    last_name  TEXT,\n    nickname   TEXT NOT NULL\n);\nBEGIN\nINSERT INTO users(id, first_name, last_name, nickname) VALUES ($1, $2, $3, $4)\nCOMMIT\n<User 'Tom·Jackson'>\n\n[Done] exited with code=0 in 0.030054 seconds\n```\n\n观察软件执行的 SQL 语句，可以发现 `find()` 方法并没有真的执行查询，这是由于调用 `insert()` 方法时对象已经被保存到标识映射中了。\n","slug":"data-mapper-pattern","published":1,"updated":"2023-02-27T16:20:05.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clen23zg50001wfm00dek5vm8","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>使用 Python 进行 web 开发时，很多人都会首先接触到 Django 这样的框架，Django ORM 提供了一种极为简单明了的与关系型数据库交互的方式。但当业务逻辑变得复杂时，关系模型和对象模型的差异总会给项目带来一些麻烦，</p>\n<p>在这种情况下，可以使用一种叫做数据映射器 (Data Mapper) 的模式将对象模型和数据源隔离，使他们能够各自演变，这样一来，软件便可以健康地发展下去。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>设想这样一种常见的情况：你需要建立一个「用户」模型，「用户」具有「真实姓名」和「昵称」，出于隐私考虑，一些「用户」可能不太愿意提供自己的「真实姓名」。在「用户」提供了「真实姓名」时，软件需要保证「用户」同时提供「姓氏」和「名字」，不能只有其中一样。</p>\n<p>聪明的你应该很快可以设计出这样一个模型:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    first_name: <span class=\"built_in\">str</span></span><br><span class=\"line\">    last_name: <span class=\"built_in\">str</span></span><br><span class=\"line\">    nickname: <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n\n<p>乍一看，这个模型可以很好的工作，但我们很容易预见到在不久的将来，代码中将会充满着 <code>if first_name == &#39;&#39; or last_name == &#39;&#39;</code> 之类的判断，当这样的判断分布在程序各个地方时，代码很快就会变得难以维护，继而分崩离析。</p>\n<p>出现这种问题的根源在于这个模型中丢失了需求里的一个重要概念（如果你注意到了我在上面那段话中的括号）「真实姓名」。让我们试着改进这个模型:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Name</span>:</span><br><span class=\"line\">    first_name: <span class=\"built_in\">str</span></span><br><span class=\"line\">    last_name: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    realname: Name</span><br><span class=\"line\">    nickname: <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n\n<p>此时我们可以仅通过 <code>if realname is None</code> 完成同样的判断了。</p>\n<p>很可惜的是，即使是这样一个简单的需求，在使用 Django ORM 时也会遇到问题，Django ORM 和 Ruby on Rails 一样，在模型层使用 「活动记录模式」 ，这种模式的特点便是模型的一个属性正好对应到关系型数据库中表的一列，在关系模型可以描述的领域中，这种方式能够极大简化模型和存储层的关系，使得软件开发变得非常迅速，可是当模型中包含复杂的领域知识（特别是涉及到继承、组合等关系）时，问题就会变得难以处理，为此我们需要采用一种更有效的方式，将领域模型和存储层隔离，「数据映射器」便是一种常用的模式。</p>\n<p>数据映射器使用一个单独的映射器对象来处理领域模型和数据库内容的相互转换，将转换的过程封装，由此隔离领域层和存储层，在这种情况下，领域模型不需要知道存储层的任何信息，你可以轻易将 MySQL 替换为 PostgreSQL ，甚至换成 XML 或 MongoDB 等非关系型存储。</p>\n<p>在开始实现映射器前，让我们先完善一下这个例子中需要使用的简单模型:</p>\n<blockquote>\n<p>这里声明一下: 为了用尽可能少的代码进行说明，我不会采用严格的编码规范，也尽量不做提前设计，因此请不要试图将这里的示例代码直接在生产中使用。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/domain/models.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Name</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, first_name: <span class=\"built_in\">str</span>, last_name: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">        self.first_name = first_name</span><br><span class=\"line\">        self.last_name = last_name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&quot;<span class=\"subst\">&#123;self.first_name&#125;</span>·<span class=\"subst\">&#123;self.last_name&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, nickname: <span class=\"built_in\">str</span>, realname: Name | <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self._<span class=\"built_in\">id</span> = id_</span><br><span class=\"line\">        self.nickname = nickname</span><br><span class=\"line\">        self.realname = realname</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">id</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._<span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(self.realname) <span class=\"keyword\">if</span> self.realname <span class=\"keyword\">else</span> self.nickname</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;User &#x27;%s&#x27;&gt;&quot;</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_user</span>(<span class=\"params\">nickname: <span class=\"built_in\">str</span>, realname: Name | <span class=\"literal\">None</span></span>) -&gt; User:</span><br><span class=\"line\">    id_ = <span class=\"string\">&quot;USER&quot;</span> + datetime.utcnow().strftime(<span class=\"string\">&quot;-%y-%m-%d-&quot;</span>) + <span class=\"built_in\">str</span>(uuid4())[:<span class=\"number\">8</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User(id_, nickname, realname)</span><br></pre></td></tr></table></figure>\n\n<p>为了给「用户」生成标识，额外添加了一个工厂方法，这会为我们之后的工作提供许多便利。</p>\n<p>接下来我们设置数据库，同样，为了保证代码的简单，这里不会引入标准库以外的内容:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/db/connections.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\">conn = sqlite3.connect(<span class=\"string\">&quot;:memory:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dict_factory</span>(<span class=\"params\">cursor, row</span>) -&gt; <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">    d = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, col <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(cursor.description):</span><br><span class=\"line\">        d[col[<span class=\"number\">0</span>]] = row[idx]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">conn.row_factory = dict_factory</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init_db</span>(<span class=\"params\">conn</span>):</span><br><span class=\"line\">    ddl = <span class=\"string\">&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS users(</span></span><br><span class=\"line\"><span class=\"string\">    id         TEXT PRIMARY KEY,</span></span><br><span class=\"line\"><span class=\"string\">    first_name TEXT,</span></span><br><span class=\"line\"><span class=\"string\">    last_name  TEXT,</span></span><br><span class=\"line\"><span class=\"string\">    nickname   TEXT NOT NULL</span></span><br><span class=\"line\"><span class=\"string\">);&quot;&quot;&quot;</span></span><br><span class=\"line\">    conn.execute(ddl)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">conn.set_trace_callback(<span class=\"built_in\">print</span>)</span><br><span class=\"line\">init_db(conn)</span><br></pre></td></tr></table></figure>\n\n<p>接下来终于可以开始编写我们的映射器了，我们首先实现一个能够将数据保存到数据库的方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/db/mappers.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.domain.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .connections <span class=\"keyword\">import</span> conn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserMapper</span>:</span><br><span class=\"line\">    tablename: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;users&quot;</span></span><br><span class=\"line\">    columns: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;id, first_name, last_name, nickname&quot;</span></span><br><span class=\"line\">    insert_statement: <span class=\"built_in\">str</span> = (</span><br><span class=\"line\">        <span class=\"string\">f&quot;INSERT INTO <span class=\"subst\">&#123;tablename&#125;</span>(<span class=\"subst\">&#123;columns&#125;</span>) VALUES ($1, $2, $3, $4)&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        statement = self.insert_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cursor.execute(statement, self.insert_data(user))</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> user.<span class=\"built_in\">id</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_data</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user.realname:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                user.<span class=\"built_in\">id</span>,</span><br><span class=\"line\">                user.realname.first_name,</span><br><span class=\"line\">                user.realname.last_name,</span><br><span class=\"line\">                user.nickname,</span><br><span class=\"line\">            )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (user.<span class=\"built_in\">id</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, user.nickname)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以运行一个简单的测试来看看它是否能够工作:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.db.connections <span class=\"keyword\">import</span> conn</span><br><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.db.mappers <span class=\"keyword\">import</span> UserMapper</span><br><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.domain.models <span class=\"keyword\">import</span> Name, new_user</span><br><span class=\"line\"></span><br><span class=\"line\">mapper = UserMapper()</span><br><span class=\"line\"></span><br><span class=\"line\">user = new_user(<span class=\"string\">&quot;Tom&quot;</span>, Name(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jackson&quot;</span>))</span><br><span class=\"line\">mapper.insert(user)</span><br><span class=\"line\"></span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">rows = cursor.execute(<span class=\"string\">&quot;SELECT * FROM users;&quot;</span>).fetchall()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(rows)</span><br><span class=\"line\">cursor.close()</span><br></pre></td></tr></table></figure>\n\n<p>得到的结果是:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> users(</span><br><span class=\"line\">    id         <span class=\"type\">TEXT</span> <span class=\"keyword\">PRIMARY KEY</span>,</span><br><span class=\"line\">    first_name <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    last_name  <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    nickname   <span class=\"type\">TEXT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id, first_name, last_name, nickname) <span class=\"keyword\">VALUES</span> (<span class=\"meta\">$1</span>, <span class=\"meta\">$2</span>, <span class=\"meta\">$3</span>, <span class=\"meta\">$4</span>)</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> users;</span><br><span class=\"line\">[&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;USER-22-07-07-11dd6b13&#x27;</span>, <span class=\"string\">&#x27;first_name&#x27;</span>: <span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;last_name&#x27;</span>: <span class=\"string\">&#x27;Jackson&#x27;</span>, <span class=\"string\">&#x27;nickname&#x27;</span>: <span class=\"string\">&#x27;Tom&#x27;</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">[Done] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.025294</span> seconds</span><br></pre></td></tr></table></figure>\n\n<p>一切顺利，接下来我们实现根据主键获取「用户」的方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserMapper</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    find_statement: <span class=\"built_in\">str</span> = <span class=\"string\">f&quot;SELECT <span class=\"subst\">&#123;columns&#125;</span> FROM <span class=\"subst\">&#123;tablename&#125;</span> WHERE id = $1 LIMIT 1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span></span>) -&gt; User:</span><br><span class=\"line\">        statement = self.find_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            rs = cursor.execute(statement, (id_,)).fetchone()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> KeyError(<span class=\"string\">f&quot;<span class=\"subst\">&#123;id_&#125;</span> is not exists&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.load(rs)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load</span>(<span class=\"params\">self, rs: <span class=\"built_in\">dict</span></span>) -&gt; User:</span><br><span class=\"line\">        id_ = rs[<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.do_load(id_, rs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_load</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, rs: <span class=\"built_in\">dict</span></span>) -&gt; User:</span><br><span class=\"line\">        first_name = rs[<span class=\"string\">&quot;first_name&quot;</span>]</span><br><span class=\"line\">        last_name = rs[<span class=\"string\">&quot;last_name&quot;</span>]</span><br><span class=\"line\">        nickname = rs[<span class=\"string\">&quot;nickname&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> first_name <span class=\"keyword\">and</span> last_name:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> User(id_, nickname, Name(first_name, last_name))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id_, nickname, <span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>测试一下效果:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapper = UserMapper()</span><br><span class=\"line\"></span><br><span class=\"line\">user = new_user(<span class=\"string\">&quot;Tom&quot;</span>, Name(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jackson&quot;</span>))</span><br><span class=\"line\">mapper.insert(user)</span><br><span class=\"line\"></span><br><span class=\"line\">user = mapper.find(user.<span class=\"built_in\">id</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(user)</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> users(</span><br><span class=\"line\">    id         <span class=\"type\">TEXT</span> <span class=\"keyword\">PRIMARY KEY</span>,</span><br><span class=\"line\">    first_name <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    last_name  <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    nickname   <span class=\"type\">TEXT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id, first_name, last_name, nickname) <span class=\"keyword\">VALUES</span> (<span class=\"meta\">$1</span>, <span class=\"meta\">$2</span>, <span class=\"meta\">$3</span>, <span class=\"meta\">$4</span>)</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> id, first_name, last_name, nickname <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id = <span class=\"meta\">$1</span> <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">User</span> <span class=\"string\">&#x27;Tom·Jackson&#x27;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[Done] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.028210</span> seconds</span><br></pre></td></tr></table></figure>\n\n<p>对于「用户」模型，到这里其实就可以结束了，但你可能注意到在 <code>find()</code> 方法的下面有几个看起来有些多余的方法，这是为了接下来的抽象预留的方法，下面我们开始对可以在多个模型间共享的方法进行抽象。</p>\n<p>首先对模型本身提取出 <code>id</code> 标识:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/domain/models.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DomainObject</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">        self._<span class=\"built_in\">id</span> = id_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">id</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._<span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"title class_ inherited__\">DomainObject</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, nickname: <span class=\"built_in\">str</span>, realname: Name | <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(id_)</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>然后是映射器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/db/mappers.py</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">ModelType = TypeVar(<span class=\"string\">&quot;ModelType&quot;</span>, bound=DomainObject)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AbstractMapper</span>(ABC, <span class=\"type\">Generic</span>[ModelType]):</span><br><span class=\"line\">    loaded_map: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, ModelType] = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, subject: ModelType</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        statement = self.insert_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cursor.execute(statement, self.insert_data(subject))</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">            self.loaded_map[subject.<span class=\"built_in\">id</span>] = subject</span><br><span class=\"line\">            <span class=\"keyword\">return</span> subject.<span class=\"built_in\">id</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_data</span>(<span class=\"params\">self, subject: ModelType</span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span></span>) -&gt; ModelType:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> id_ <span class=\"keyword\">in</span> self.loaded_map:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.loaded_map[id_]</span><br><span class=\"line\">        statement = self.find_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            rs = cursor.execute(statement, (id_,)).fetchone()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> KeyError(<span class=\"string\">f&quot;<span class=\"subst\">&#123;id_&#125;</span> is not exists&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.load(rs)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load</span>(<span class=\"params\">self, rs: <span class=\"built_in\">dict</span></span>) -&gt; ModelType:</span><br><span class=\"line\">        id_ = rs[<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> id_ <span class=\"keyword\">in</span> self.loaded_map:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.loaded_map[id_]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.do_load(id_, rs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_load</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, rs: <span class=\"built_in\">dict</span></span>) -&gt; ModelType:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserMapper</span>(AbstractMapper[User]):</span><br><span class=\"line\">    tablename: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;users&quot;</span></span><br><span class=\"line\">    columns: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;id, first_name, last_name, nickname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&quot;INSERT INTO <span class=\"subst\">&#123;self.tablename&#125;</span>(<span class=\"subst\">&#123;self.columns&#125;</span>) VALUES ($1, $2, $3, $4)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&quot;SELECT <span class=\"subst\">&#123;self.columns&#125;</span> FROM <span class=\"subst\">&#123;self.tablename&#125;</span> WHERE id = $1 LIMIT 1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_data</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user.realname:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                user.<span class=\"built_in\">id</span>,</span><br><span class=\"line\">                user.realname.first_name,</span><br><span class=\"line\">                user.realname.last_name,</span><br><span class=\"line\">                user.nickname,</span><br><span class=\"line\">            )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (user.<span class=\"built_in\">id</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, user.nickname)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_load</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, rs: <span class=\"built_in\">dict</span></span>) -&gt; User:</span><br><span class=\"line\">        first_name = rs[<span class=\"string\">&quot;first_name&quot;</span>]</span><br><span class=\"line\">        last_name = rs[<span class=\"string\">&quot;last_name&quot;</span>]</span><br><span class=\"line\">        nickname = rs[<span class=\"string\">&quot;nickname&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> first_name <span class=\"keyword\">and</span> last_name:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> User(id_, nickname, Name(first_name, last_name))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id_, nickname, <span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>经过提取后，大部分查询逻辑和数据库交互均转移到了 <code>AbstractMapper</code> ，具体的映射器只需要实现部分与具体模型相关的功能即可。此外，我在映射器中添加了一个标识映射，用来避免重复的数据库交互。</p>\n<p>我们重新运行代码，得到的结果是:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\">CREATE TABLE IF NOT EXISTS users(</span><br><span class=\"line\">    <span class=\"built_in\">id</span>         TEXT PRIMARY KEY,</span><br><span class=\"line\">    first_name TEXT,</span><br><span class=\"line\">    last_name  TEXT,</span><br><span class=\"line\">    nickname   TEXT NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">INSERT INTO users(<span class=\"built_in\">id</span>, first_name, last_name, nickname) VALUES ($<span class=\"number\">1</span>, $<span class=\"number\">2</span>, $<span class=\"number\">3</span>, $<span class=\"number\">4</span>)</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\">&lt;User <span class=\"string\">&#x27;Tom·Jackson&#x27;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[Done] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.030054</span> seconds</span><br></pre></td></tr></table></figure>\n\n<p>观察软件执行的 SQL 语句，可以发现 <code>find()</code> 方法并没有真的执行查询，这是由于调用 <code>insert()</code> 方法时对象已经被保存到标识映射中了。</p>\n","site":{"data":{}},"length":8370,"excerpt":"<blockquote>\n<p>使用 Python 进行 web 开发时，很多人都会首先接触到 Django 这样的框架，Django ORM 提供了一种极为简单明了的与关系型数据库交互的方式。但当业务逻辑变得复杂时，关系模型和对象模型的差异总会给项目带来一些麻烦，</p>\n<p>在这种情况下，可以使用一种叫做数据映射器 (Data Mapper) 的模式将对象模型和数据源隔离，使他们能够各自演变，这样一来，软件便可以健康地发展下去。</p>\n</blockquote>","more":"<p>设想这样一种常见的情况：你需要建立一个「用户」模型，「用户」具有「真实姓名」和「昵称」，出于隐私考虑，一些「用户」可能不太愿意提供自己的「真实姓名」。在「用户」提供了「真实姓名」时，软件需要保证「用户」同时提供「姓氏」和「名字」，不能只有其中一样。</p>\n<p>聪明的你应该很快可以设计出这样一个模型:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    first_name: <span class=\"built_in\">str</span></span><br><span class=\"line\">    last_name: <span class=\"built_in\">str</span></span><br><span class=\"line\">    nickname: <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n\n<p>乍一看，这个模型可以很好的工作，但我们很容易预见到在不久的将来，代码中将会充满着 <code>if first_name == &#39;&#39; or last_name == &#39;&#39;</code> 之类的判断，当这样的判断分布在程序各个地方时，代码很快就会变得难以维护，继而分崩离析。</p>\n<p>出现这种问题的根源在于这个模型中丢失了需求里的一个重要概念（如果你注意到了我在上面那段话中的括号）「真实姓名」。让我们试着改进这个模型:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Name</span>:</span><br><span class=\"line\">    first_name: <span class=\"built_in\">str</span></span><br><span class=\"line\">    last_name: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    realname: Name</span><br><span class=\"line\">    nickname: <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n\n<p>此时我们可以仅通过 <code>if realname is None</code> 完成同样的判断了。</p>\n<p>很可惜的是，即使是这样一个简单的需求，在使用 Django ORM 时也会遇到问题，Django ORM 和 Ruby on Rails 一样，在模型层使用 「活动记录模式」 ，这种模式的特点便是模型的一个属性正好对应到关系型数据库中表的一列，在关系模型可以描述的领域中，这种方式能够极大简化模型和存储层的关系，使得软件开发变得非常迅速，可是当模型中包含复杂的领域知识（特别是涉及到继承、组合等关系）时，问题就会变得难以处理，为此我们需要采用一种更有效的方式，将领域模型和存储层隔离，「数据映射器」便是一种常用的模式。</p>\n<p>数据映射器使用一个单独的映射器对象来处理领域模型和数据库内容的相互转换，将转换的过程封装，由此隔离领域层和存储层，在这种情况下，领域模型不需要知道存储层的任何信息，你可以轻易将 MySQL 替换为 PostgreSQL ，甚至换成 XML 或 MongoDB 等非关系型存储。</p>\n<p>在开始实现映射器前，让我们先完善一下这个例子中需要使用的简单模型:</p>\n<blockquote>\n<p>这里声明一下: 为了用尽可能少的代码进行说明，我不会采用严格的编码规范，也尽量不做提前设计，因此请不要试图将这里的示例代码直接在生产中使用。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/domain/models.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Name</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, first_name: <span class=\"built_in\">str</span>, last_name: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">        self.first_name = first_name</span><br><span class=\"line\">        self.last_name = last_name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&quot;<span class=\"subst\">&#123;self.first_name&#125;</span>·<span class=\"subst\">&#123;self.last_name&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, nickname: <span class=\"built_in\">str</span>, realname: Name | <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self._<span class=\"built_in\">id</span> = id_</span><br><span class=\"line\">        self.nickname = nickname</span><br><span class=\"line\">        self.realname = realname</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">id</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._<span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(self.realname) <span class=\"keyword\">if</span> self.realname <span class=\"keyword\">else</span> self.nickname</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;User &#x27;%s&#x27;&gt;&quot;</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_user</span>(<span class=\"params\">nickname: <span class=\"built_in\">str</span>, realname: Name | <span class=\"literal\">None</span></span>) -&gt; User:</span><br><span class=\"line\">    id_ = <span class=\"string\">&quot;USER&quot;</span> + datetime.utcnow().strftime(<span class=\"string\">&quot;-%y-%m-%d-&quot;</span>) + <span class=\"built_in\">str</span>(uuid4())[:<span class=\"number\">8</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User(id_, nickname, realname)</span><br></pre></td></tr></table></figure>\n\n<p>为了给「用户」生成标识，额外添加了一个工厂方法，这会为我们之后的工作提供许多便利。</p>\n<p>接下来我们设置数据库，同样，为了保证代码的简单，这里不会引入标准库以外的内容:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/db/connections.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\">conn = sqlite3.connect(<span class=\"string\">&quot;:memory:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dict_factory</span>(<span class=\"params\">cursor, row</span>) -&gt; <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">    d = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, col <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(cursor.description):</span><br><span class=\"line\">        d[col[<span class=\"number\">0</span>]] = row[idx]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">conn.row_factory = dict_factory</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init_db</span>(<span class=\"params\">conn</span>):</span><br><span class=\"line\">    ddl = <span class=\"string\">&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS users(</span></span><br><span class=\"line\"><span class=\"string\">    id         TEXT PRIMARY KEY,</span></span><br><span class=\"line\"><span class=\"string\">    first_name TEXT,</span></span><br><span class=\"line\"><span class=\"string\">    last_name  TEXT,</span></span><br><span class=\"line\"><span class=\"string\">    nickname   TEXT NOT NULL</span></span><br><span class=\"line\"><span class=\"string\">);&quot;&quot;&quot;</span></span><br><span class=\"line\">    conn.execute(ddl)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">conn.set_trace_callback(<span class=\"built_in\">print</span>)</span><br><span class=\"line\">init_db(conn)</span><br></pre></td></tr></table></figure>\n\n<p>接下来终于可以开始编写我们的映射器了，我们首先实现一个能够将数据保存到数据库的方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/db/mappers.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.domain.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .connections <span class=\"keyword\">import</span> conn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserMapper</span>:</span><br><span class=\"line\">    tablename: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;users&quot;</span></span><br><span class=\"line\">    columns: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;id, first_name, last_name, nickname&quot;</span></span><br><span class=\"line\">    insert_statement: <span class=\"built_in\">str</span> = (</span><br><span class=\"line\">        <span class=\"string\">f&quot;INSERT INTO <span class=\"subst\">&#123;tablename&#125;</span>(<span class=\"subst\">&#123;columns&#125;</span>) VALUES ($1, $2, $3, $4)&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        statement = self.insert_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cursor.execute(statement, self.insert_data(user))</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> user.<span class=\"built_in\">id</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_data</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user.realname:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                user.<span class=\"built_in\">id</span>,</span><br><span class=\"line\">                user.realname.first_name,</span><br><span class=\"line\">                user.realname.last_name,</span><br><span class=\"line\">                user.nickname,</span><br><span class=\"line\">            )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (user.<span class=\"built_in\">id</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, user.nickname)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以运行一个简单的测试来看看它是否能够工作:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.db.connections <span class=\"keyword\">import</span> conn</span><br><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.db.mappers <span class=\"keyword\">import</span> UserMapper</span><br><span class=\"line\"><span class=\"keyword\">from</span> data_mapper.domain.models <span class=\"keyword\">import</span> Name, new_user</span><br><span class=\"line\"></span><br><span class=\"line\">mapper = UserMapper()</span><br><span class=\"line\"></span><br><span class=\"line\">user = new_user(<span class=\"string\">&quot;Tom&quot;</span>, Name(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jackson&quot;</span>))</span><br><span class=\"line\">mapper.insert(user)</span><br><span class=\"line\"></span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">rows = cursor.execute(<span class=\"string\">&quot;SELECT * FROM users;&quot;</span>).fetchall()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(rows)</span><br><span class=\"line\">cursor.close()</span><br></pre></td></tr></table></figure>\n\n<p>得到的结果是:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> users(</span><br><span class=\"line\">    id         <span class=\"type\">TEXT</span> <span class=\"keyword\">PRIMARY KEY</span>,</span><br><span class=\"line\">    first_name <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    last_name  <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    nickname   <span class=\"type\">TEXT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id, first_name, last_name, nickname) <span class=\"keyword\">VALUES</span> (<span class=\"meta\">$1</span>, <span class=\"meta\">$2</span>, <span class=\"meta\">$3</span>, <span class=\"meta\">$4</span>)</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> users;</span><br><span class=\"line\">[&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;USER-22-07-07-11dd6b13&#x27;</span>, <span class=\"string\">&#x27;first_name&#x27;</span>: <span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;last_name&#x27;</span>: <span class=\"string\">&#x27;Jackson&#x27;</span>, <span class=\"string\">&#x27;nickname&#x27;</span>: <span class=\"string\">&#x27;Tom&#x27;</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">[Done] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.025294</span> seconds</span><br></pre></td></tr></table></figure>\n\n<p>一切顺利，接下来我们实现根据主键获取「用户」的方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserMapper</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    find_statement: <span class=\"built_in\">str</span> = <span class=\"string\">f&quot;SELECT <span class=\"subst\">&#123;columns&#125;</span> FROM <span class=\"subst\">&#123;tablename&#125;</span> WHERE id = $1 LIMIT 1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span></span>) -&gt; User:</span><br><span class=\"line\">        statement = self.find_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            rs = cursor.execute(statement, (id_,)).fetchone()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> KeyError(<span class=\"string\">f&quot;<span class=\"subst\">&#123;id_&#125;</span> is not exists&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.load(rs)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load</span>(<span class=\"params\">self, rs: <span class=\"built_in\">dict</span></span>) -&gt; User:</span><br><span class=\"line\">        id_ = rs[<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.do_load(id_, rs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_load</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, rs: <span class=\"built_in\">dict</span></span>) -&gt; User:</span><br><span class=\"line\">        first_name = rs[<span class=\"string\">&quot;first_name&quot;</span>]</span><br><span class=\"line\">        last_name = rs[<span class=\"string\">&quot;last_name&quot;</span>]</span><br><span class=\"line\">        nickname = rs[<span class=\"string\">&quot;nickname&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> first_name <span class=\"keyword\">and</span> last_name:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> User(id_, nickname, Name(first_name, last_name))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id_, nickname, <span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>测试一下效果:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapper = UserMapper()</span><br><span class=\"line\"></span><br><span class=\"line\">user = new_user(<span class=\"string\">&quot;Tom&quot;</span>, Name(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jackson&quot;</span>))</span><br><span class=\"line\">mapper.insert(user)</span><br><span class=\"line\"></span><br><span class=\"line\">user = mapper.find(user.<span class=\"built_in\">id</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(user)</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> users(</span><br><span class=\"line\">    id         <span class=\"type\">TEXT</span> <span class=\"keyword\">PRIMARY KEY</span>,</span><br><span class=\"line\">    first_name <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    last_name  <span class=\"type\">TEXT</span>,</span><br><span class=\"line\">    nickname   <span class=\"type\">TEXT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id, first_name, last_name, nickname) <span class=\"keyword\">VALUES</span> (<span class=\"meta\">$1</span>, <span class=\"meta\">$2</span>, <span class=\"meta\">$3</span>, <span class=\"meta\">$4</span>)</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> id, first_name, last_name, nickname <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id = <span class=\"meta\">$1</span> <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">User</span> <span class=\"string\">&#x27;Tom·Jackson&#x27;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[Done] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.028210</span> seconds</span><br></pre></td></tr></table></figure>\n\n<p>对于「用户」模型，到这里其实就可以结束了，但你可能注意到在 <code>find()</code> 方法的下面有几个看起来有些多余的方法，这是为了接下来的抽象预留的方法，下面我们开始对可以在多个模型间共享的方法进行抽象。</p>\n<p>首先对模型本身提取出 <code>id</code> 标识:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/domain/models.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DomainObject</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">        self._<span class=\"built_in\">id</span> = id_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">id</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._<span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"title class_ inherited__\">DomainObject</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, nickname: <span class=\"built_in\">str</span>, realname: Name | <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(id_)</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>然后是映射器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data_mapper/db/mappers.py</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">ModelType = TypeVar(<span class=\"string\">&quot;ModelType&quot;</span>, bound=DomainObject)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AbstractMapper</span>(ABC, <span class=\"type\">Generic</span>[ModelType]):</span><br><span class=\"line\">    loaded_map: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, ModelType] = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, subject: ModelType</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        statement = self.insert_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cursor.execute(statement, self.insert_data(subject))</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">            self.loaded_map[subject.<span class=\"built_in\">id</span>] = subject</span><br><span class=\"line\">            <span class=\"keyword\">return</span> subject.<span class=\"built_in\">id</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_data</span>(<span class=\"params\">self, subject: ModelType</span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span></span>) -&gt; ModelType:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> id_ <span class=\"keyword\">in</span> self.loaded_map:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.loaded_map[id_]</span><br><span class=\"line\">        statement = self.find_statement</span><br><span class=\"line\">        cursor = conn.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            rs = cursor.execute(statement, (id_,)).fetchone()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> KeyError(<span class=\"string\">f&quot;<span class=\"subst\">&#123;id_&#125;</span> is not exists&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.load(rs)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load</span>(<span class=\"params\">self, rs: <span class=\"built_in\">dict</span></span>) -&gt; ModelType:</span><br><span class=\"line\">        id_ = rs[<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> id_ <span class=\"keyword\">in</span> self.loaded_map:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.loaded_map[id_]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.do_load(id_, rs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_load</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, rs: <span class=\"built_in\">dict</span></span>) -&gt; ModelType:</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserMapper</span>(AbstractMapper[User]):</span><br><span class=\"line\">    tablename: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;users&quot;</span></span><br><span class=\"line\">    columns: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;id, first_name, last_name, nickname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&quot;INSERT INTO <span class=\"subst\">&#123;self.tablename&#125;</span>(<span class=\"subst\">&#123;self.columns&#125;</span>) VALUES ($1, $2, $3, $4)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find_statement</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&quot;SELECT <span class=\"subst\">&#123;self.columns&#125;</span> FROM <span class=\"subst\">&#123;self.tablename&#125;</span> WHERE id = $1 LIMIT 1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_data</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user.realname:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                user.<span class=\"built_in\">id</span>,</span><br><span class=\"line\">                user.realname.first_name,</span><br><span class=\"line\">                user.realname.last_name,</span><br><span class=\"line\">                user.nickname,</span><br><span class=\"line\">            )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (user.<span class=\"built_in\">id</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, user.nickname)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_load</span>(<span class=\"params\">self, id_: <span class=\"built_in\">str</span>, rs: <span class=\"built_in\">dict</span></span>) -&gt; User:</span><br><span class=\"line\">        first_name = rs[<span class=\"string\">&quot;first_name&quot;</span>]</span><br><span class=\"line\">        last_name = rs[<span class=\"string\">&quot;last_name&quot;</span>]</span><br><span class=\"line\">        nickname = rs[<span class=\"string\">&quot;nickname&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> first_name <span class=\"keyword\">and</span> last_name:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> User(id_, nickname, Name(first_name, last_name))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id_, nickname, <span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>经过提取后，大部分查询逻辑和数据库交互均转移到了 <code>AbstractMapper</code> ，具体的映射器只需要实现部分与具体模型相关的功能即可。此外，我在映射器中添加了一个标识映射，用来避免重复的数据库交互。</p>\n<p>我们重新运行代码，得到的结果是:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\">CREATE TABLE IF NOT EXISTS users(</span><br><span class=\"line\">    <span class=\"built_in\">id</span>         TEXT PRIMARY KEY,</span><br><span class=\"line\">    first_name TEXT,</span><br><span class=\"line\">    last_name  TEXT,</span><br><span class=\"line\">    nickname   TEXT NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">INSERT INTO users(<span class=\"built_in\">id</span>, first_name, last_name, nickname) VALUES ($<span class=\"number\">1</span>, $<span class=\"number\">2</span>, $<span class=\"number\">3</span>, $<span class=\"number\">4</span>)</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\">&lt;User <span class=\"string\">&#x27;Tom·Jackson&#x27;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[Done] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.030054</span> seconds</span><br></pre></td></tr></table></figure>\n\n<p>观察软件执行的 SQL 语句，可以发现 <code>find()</code> 方法并没有真的执行查询，这是由于调用 <code>insert()</code> 方法时对象已经被保存到标识映射中了。</p>"},{"title":"制作一个简单的 Alfred Workflow","date":"2022-07-10T11:40:05.000Z","_content":"\n\n> 在论坛或群聊中给人发送一些内容时，有时需要简单隐藏一下内容，通常我会使用 base64 对内容进行编码。\n>\n> 之前一直使用 Chrome 插件提供的功能来完成，最近突然想起了 Alfred Workflow 更适合做这件事。\n\n<!-- more -->\n\nAlfred and workflow\n-------------------\n\nAlfred 是 macOS 平台上的一个工具类 App ，提供全局搜索和启动器等功能。\n\n此外，它拥有一个叫做 「Workflow」 的功能，可以通过自定义的方式实现自己的工作流。\n\n之前我一直使用一个叫做 encode 的 workflow 来快速进行编解码操作，然而它的作者似乎已经没有在维护了，随着 macOS 的更新，系统也不再默认提供它所依赖的 php runtime 了。\n\n在到处都找不到好用的工具后，我决定自己来实现这个功能。\n\nCreate a simple\n---------------\n\n虽然听起来很复杂，但自己创建一个 workflow 其实并不困难， Alfred 为了让普通人也能够创建 workflow ，提供了相当多方便的操作和直观的界面。\n\n不过对于我们这种简单的应用来说，只需要使用其中两项功能就足够了。\n\nInput: script filter\n--------------------\n\n首先在空白的 workflow 上右键选择 `Inputs > ScriptFilter` 。\n\n我们可以在上方设置触发功能使用的关键词，提示用语等内容，并在下面的 `Script` 区域对输入进行处理。\n\nAlfred 使用 JSON 格式来控制输出，我们只会用到以下最简单的几项:\n\n- title: 显示内容的标题\n- subtitle: 副标题\n- arg: 传递给下一步的参数\n\n将以上内容的列表作为 `items` 的值输出即可让它们显示在 Alfred 的结果中了。\n\n考虑到我暂时只需要 base64 编码和解码的功能，我选择最简单的 Ruby 实现:\n\n```ruby\nquery = ARGV[0]\n\nrequire 'json'\nrequire 'base64'\n\nb64 = Base64.encode64(query)\n\nresults = {items: [\n\t{ title: b64, subtitle: 'base64', arg: b64 }\n]}\nprint results.to_json\n```\n\n解码同理，使用 `Base64.decode64` 即可。\n\nOutput: copy to clipboard\n-------------------------\n\n实现功能后，我们需要考虑如何使用结果，最简单的方法当然是将结果复制下来。\n\n右键选择 `Outputs > Copy to Clipboard` ，然后将之前创建的 ScriptFilter 连过去就可以。\n\n![workflow](workflow.png)\n\n![encode](encode.png)\n","source":"_posts/create-alfred-encode-workflow.md","raw":"---\ntitle: 制作一个简单的 Alfred Workflow\ndate: 2022-07-10 19:40:05\ncategory: macOS\ntags:\n  - alfred\n  - workflow\n  - macos\n  - ruby\n---\n\n\n> 在论坛或群聊中给人发送一些内容时，有时需要简单隐藏一下内容，通常我会使用 base64 对内容进行编码。\n>\n> 之前一直使用 Chrome 插件提供的功能来完成，最近突然想起了 Alfred Workflow 更适合做这件事。\n\n<!-- more -->\n\nAlfred and workflow\n-------------------\n\nAlfred 是 macOS 平台上的一个工具类 App ，提供全局搜索和启动器等功能。\n\n此外，它拥有一个叫做 「Workflow」 的功能，可以通过自定义的方式实现自己的工作流。\n\n之前我一直使用一个叫做 encode 的 workflow 来快速进行编解码操作，然而它的作者似乎已经没有在维护了，随着 macOS 的更新，系统也不再默认提供它所依赖的 php runtime 了。\n\n在到处都找不到好用的工具后，我决定自己来实现这个功能。\n\nCreate a simple\n---------------\n\n虽然听起来很复杂，但自己创建一个 workflow 其实并不困难， Alfred 为了让普通人也能够创建 workflow ，提供了相当多方便的操作和直观的界面。\n\n不过对于我们这种简单的应用来说，只需要使用其中两项功能就足够了。\n\nInput: script filter\n--------------------\n\n首先在空白的 workflow 上右键选择 `Inputs > ScriptFilter` 。\n\n我们可以在上方设置触发功能使用的关键词，提示用语等内容，并在下面的 `Script` 区域对输入进行处理。\n\nAlfred 使用 JSON 格式来控制输出，我们只会用到以下最简单的几项:\n\n- title: 显示内容的标题\n- subtitle: 副标题\n- arg: 传递给下一步的参数\n\n将以上内容的列表作为 `items` 的值输出即可让它们显示在 Alfred 的结果中了。\n\n考虑到我暂时只需要 base64 编码和解码的功能，我选择最简单的 Ruby 实现:\n\n```ruby\nquery = ARGV[0]\n\nrequire 'json'\nrequire 'base64'\n\nb64 = Base64.encode64(query)\n\nresults = {items: [\n\t{ title: b64, subtitle: 'base64', arg: b64 }\n]}\nprint results.to_json\n```\n\n解码同理，使用 `Base64.decode64` 即可。\n\nOutput: copy to clipboard\n-------------------------\n\n实现功能后，我们需要考虑如何使用结果，最简单的方法当然是将结果复制下来。\n\n右键选择 `Outputs > Copy to Clipboard` ，然后将之前创建的 ScriptFilter 连过去就可以。\n\n![workflow](workflow.png)\n\n![encode](encode.png)\n","slug":"create-alfred-encode-workflow","published":1,"updated":"2023-02-27T16:19:53.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clen23zg80003wfm0c85l2ur2","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>在论坛或群聊中给人发送一些内容时，有时需要简单隐藏一下内容，通常我会使用 base64 对内容进行编码。</p>\n<p>之前一直使用 Chrome 插件提供的功能来完成，最近突然想起了 Alfred Workflow 更适合做这件事。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Alfred-and-workflow\"><a href=\"#Alfred-and-workflow\" class=\"headerlink\" title=\"Alfred and workflow\"></a>Alfred and workflow</h2><p>Alfred 是 macOS 平台上的一个工具类 App ，提供全局搜索和启动器等功能。</p>\n<p>此外，它拥有一个叫做 「Workflow」 的功能，可以通过自定义的方式实现自己的工作流。</p>\n<p>之前我一直使用一个叫做 encode 的 workflow 来快速进行编解码操作，然而它的作者似乎已经没有在维护了，随着 macOS 的更新，系统也不再默认提供它所依赖的 php runtime 了。</p>\n<p>在到处都找不到好用的工具后，我决定自己来实现这个功能。</p>\n<h2 id=\"Create-a-simple\"><a href=\"#Create-a-simple\" class=\"headerlink\" title=\"Create a simple\"></a>Create a simple</h2><p>虽然听起来很复杂，但自己创建一个 workflow 其实并不困难， Alfred 为了让普通人也能够创建 workflow ，提供了相当多方便的操作和直观的界面。</p>\n<p>不过对于我们这种简单的应用来说，只需要使用其中两项功能就足够了。</p>\n<h2 id=\"Input-script-filter\"><a href=\"#Input-script-filter\" class=\"headerlink\" title=\"Input: script filter\"></a>Input: script filter</h2><p>首先在空白的 workflow 上右键选择 <code>Inputs &gt; ScriptFilter</code> 。</p>\n<p>我们可以在上方设置触发功能使用的关键词，提示用语等内容，并在下面的 <code>Script</code> 区域对输入进行处理。</p>\n<p>Alfred 使用 JSON 格式来控制输出，我们只会用到以下最简单的几项:</p>\n<ul>\n<li>title: 显示内容的标题</li>\n<li>subtitle: 副标题</li>\n<li>arg: 传递给下一步的参数</li>\n</ul>\n<p>将以上内容的列表作为 <code>items</code> 的值输出即可让它们显示在 Alfred 的结果中了。</p>\n<p>考虑到我暂时只需要 base64 编码和解码的功能，我选择最简单的 Ruby 实现:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query = <span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;base64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">b64 = <span class=\"title class_\">Base64</span>.encode64(query)</span><br><span class=\"line\"></span><br><span class=\"line\">results = &#123;<span class=\"symbol\">items:</span> [</span><br><span class=\"line\">\t&#123; <span class=\"symbol\">title:</span> b64, <span class=\"symbol\">subtitle:</span> <span class=\"string\">&#x27;base64&#x27;</span>, <span class=\"symbol\">arg:</span> b64 &#125;</span><br><span class=\"line\">]&#125;</span><br><span class=\"line\">print results.to_json</span><br></pre></td></tr></table></figure>\n\n<p>解码同理，使用 <code>Base64.decode64</code> 即可。</p>\n<h2 id=\"Output-copy-to-clipboard\"><a href=\"#Output-copy-to-clipboard\" class=\"headerlink\" title=\"Output: copy to clipboard\"></a>Output: copy to clipboard</h2><p>实现功能后，我们需要考虑如何使用结果，最简单的方法当然是将结果复制下来。</p>\n<p>右键选择 <code>Outputs &gt; Copy to Clipboard</code> ，然后将之前创建的 ScriptFilter 连过去就可以。</p>\n<p><img src=\"/2022/07/10/create-alfred-encode-workflow/workflow.png\" alt=\"workflow\"></p>\n<p><img src=\"/2022/07/10/create-alfred-encode-workflow/encode.png\" alt=\"encode\"></p>\n","site":{"data":{}},"length":1044,"excerpt":"<blockquote>\n<p>在论坛或群聊中给人发送一些内容时，有时需要简单隐藏一下内容，通常我会使用 base64 对内容进行编码。</p>\n<p>之前一直使用 Chrome 插件提供的功能来完成，最近突然想起了 Alfred Workflow 更适合做这件事。</p>\n</blockquote>","more":"<h2 id=\"Alfred-and-workflow\"><a href=\"#Alfred-and-workflow\" class=\"headerlink\" title=\"Alfred and workflow\"></a>Alfred and workflow</h2><p>Alfred 是 macOS 平台上的一个工具类 App ，提供全局搜索和启动器等功能。</p>\n<p>此外，它拥有一个叫做 「Workflow」 的功能，可以通过自定义的方式实现自己的工作流。</p>\n<p>之前我一直使用一个叫做 encode 的 workflow 来快速进行编解码操作，然而它的作者似乎已经没有在维护了，随着 macOS 的更新，系统也不再默认提供它所依赖的 php runtime 了。</p>\n<p>在到处都找不到好用的工具后，我决定自己来实现这个功能。</p>\n<h2 id=\"Create-a-simple\"><a href=\"#Create-a-simple\" class=\"headerlink\" title=\"Create a simple\"></a>Create a simple</h2><p>虽然听起来很复杂，但自己创建一个 workflow 其实并不困难， Alfred 为了让普通人也能够创建 workflow ，提供了相当多方便的操作和直观的界面。</p>\n<p>不过对于我们这种简单的应用来说，只需要使用其中两项功能就足够了。</p>\n<h2 id=\"Input-script-filter\"><a href=\"#Input-script-filter\" class=\"headerlink\" title=\"Input: script filter\"></a>Input: script filter</h2><p>首先在空白的 workflow 上右键选择 <code>Inputs &gt; ScriptFilter</code> 。</p>\n<p>我们可以在上方设置触发功能使用的关键词，提示用语等内容，并在下面的 <code>Script</code> 区域对输入进行处理。</p>\n<p>Alfred 使用 JSON 格式来控制输出，我们只会用到以下最简单的几项:</p>\n<ul>\n<li>title: 显示内容的标题</li>\n<li>subtitle: 副标题</li>\n<li>arg: 传递给下一步的参数</li>\n</ul>\n<p>将以上内容的列表作为 <code>items</code> 的值输出即可让它们显示在 Alfred 的结果中了。</p>\n<p>考虑到我暂时只需要 base64 编码和解码的功能，我选择最简单的 Ruby 实现:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query = <span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;base64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">b64 = <span class=\"title class_\">Base64</span>.encode64(query)</span><br><span class=\"line\"></span><br><span class=\"line\">results = &#123;<span class=\"symbol\">items:</span> [</span><br><span class=\"line\">\t&#123; <span class=\"symbol\">title:</span> b64, <span class=\"symbol\">subtitle:</span> <span class=\"string\">&#x27;base64&#x27;</span>, <span class=\"symbol\">arg:</span> b64 &#125;</span><br><span class=\"line\">]&#125;</span><br><span class=\"line\">print results.to_json</span><br></pre></td></tr></table></figure>\n\n<p>解码同理，使用 <code>Base64.decode64</code> 即可。</p>\n<h2 id=\"Output-copy-to-clipboard\"><a href=\"#Output-copy-to-clipboard\" class=\"headerlink\" title=\"Output: copy to clipboard\"></a>Output: copy to clipboard</h2><p>实现功能后，我们需要考虑如何使用结果，最简单的方法当然是将结果复制下来。</p>\n<p>右键选择 <code>Outputs &gt; Copy to Clipboard</code> ，然后将之前创建的 ScriptFilter 连过去就可以。</p>\n<p><img src=\"/2022/07/10/create-alfred-encode-workflow/workflow.png\" alt=\"workflow\"></p>\n<p><img src=\"/2022/07/10/create-alfred-encode-workflow/encode.png\" alt=\"encode\"></p>"},{"title":"使用关系型数据库实现事件源模式","date":"2022-05-16T14:35:51.000Z","_content":"\n\n> 关系型数据库是日常开发中最常用的数据库类型，本文记载使用关系型数据库实现事件源模式的要点和一些问题。\n>\n> 要阅读本篇文章，你可能需要先自行了解关系型数据库、事件源模式和领域驱动设计相关知识。\n\n<!-- more -->\n\n## 事件存储\n\n首先考虑事件的存储，实际上只需要四个字段， DDL 如下（以 PostgreSQL 为例）：\n\n```sql\nCREATE TABLE events\n(\n    id        SERIAL      PRIMARY KEY,\n    stream_id VARCHAR(50) NOT NULL,\n    version   BIGINT      NOT NULL,\n    data      TEXT        NOT NULL,\n    UNIQUE (stream_id, version)\n);\n```\n\n其中， `stream_id` 是实体或聚合的唯一标识，也可以把这个字段叫做 `name` 或者其他你喜欢的名字， `version` 是事件的版本，由于事件是只追加的，版本会不断增加，并且对于同一个实体或聚合来说，版本号不会有重复。\n\n`id` 是事件的标识符，由数据库生成即可。\n\n使用这种简单的结构，我们已经可以实现两种事件源模式需要的功能了。首先是获取事件流：\n\n```sql\nSELECT id, stream_id, version, data FROM events\n    WHERE stream_id = :stream_id ORDER BY version ASC;\n```\n\n根据有序的事件流，我们可以重建出一个实体或聚合的最新状态，这是事件源模式的关键功能。\n\n第二项功能是记录事件，使用：\n\n```sql\nINSERT INTO events(stream_id, version, data)\n    VALUES(:stream_id, :current+1, :data);\n```\n\n需要注意的是，这里的 `current+1` 仅仅表示插入数据时应该让版本增加 1，而不是可以直接在 SQL 语句中这样写。\n考虑到主流关系型数据库的默认隔离级别，这种写法会产生一些并发问题。（对于 PostgreSQL ，可以指定隔离级别为 *Repeatable Read* ）\n\n## 投影 (PROJECTION)\n\n事件源模式的另一个问题是无法像传统表结构那样进行过滤，我们使用投影来解决这个问题。\n\n投影是通过提前聚合事件形成的一种视图，我们既可以同步更新投影，也可以异步更新投影。在异步更新时，系统将获得更高的性能，但会存在一定延迟，这时的系统实现的是 *最终一致性* 。\n\n实现最终一致性并不是一件容易的事，在关系型数据库中，为了简单，我们可以先同步更新投影，这种情况下应该利用关系库的一致性保证，即使用 **事务**。\n\n每个事务中我们做两件事：\n\n- 插入新的事件\n- 更新投影\n\n因为事件存储是整个系统的唯一数据源，所以投影可以被轻易放弃、调整结构，只需要重放所有事件即可生成新的投影用来适配客户端的查询需求。\n\n## 快照 (SNAPSHOT)\n\n快照解决事件源模式中的另一个问题：当事件数量不断增加时，重建一个实体或聚合的成本也会不断增加。\n\n可以将快照视为一种特殊的投影，与投影相比，快照最大的不同点是它需要保存版本信息，这样我们就可以在重建时先查询快照，然后仅将快照对应版本之后发生的事件应用在实体或聚合上。\n\n和投影一样，使用关系库时，我们可以在同一个事务中更新快照，不过快照并不需要频繁更新，通常每 50-100 个版本更新一次即可[^1]。\n\n## 滚动升级\n\n引入快照和投影之后，我们失去了一些灵活性，其中很重要的一点就是要如何修改投影和快照的结构。\n\n当条件允许时，最简单的方式是停止服务，删除旧的投影和快照表，然后重放事件并生成一份新的表。然而生产服务并不会允许我们这样做，因此当需要升级时，我们应该考虑以下步骤：\n\n1. 创建新的投影和快照表。\n2. 修改程序，当新的事件写入时，旧表和新表都应该被更新，当然，只有当实体已经存在于新表中时，它才会被更新。\n3. 如果有新的实体或聚合被创建，它会同时被保存到两个表中。\n4. 最后，我们重放所有已有的事件，并将它们聚合后的结果写入新表中。\n5. 当以上步骤完成，新旧两个版本的数据会同步更新，此时我们可以删除旧表和相关逻辑。\n\n## 异步\n\n最后，让我们考虑一下性能问题。当系统成长到一定规模时，我们会很自然地想到采用异步更新投影的方式来改善性能，事件源模式最终通常会引入消息队列（甚至是 Kafka ）。\n\n然而在关系库和消息队列之间并没有一种方式可以维持一致性，无论在数据库事务的哪个阶段发送消息，都可能产生一些副作用。\n\n由于使用不同组件，我们没有方法可以彻底消除副作用，但可以通过一些手段来实现最终一致性：\n\n1. 创建一张队列 (queue) 表 ，用来存放新生成的事件。\n2. 当有新的事件生成时，同时写入事件存储和队列。\n3. 使用一个 **单线程的** 程序轮询队列，分批取出其中的事件并发送到消息队列，然后从队列中删除这些事件。\n4. 创建事件监听器，从消息队列中获取事件并更新投影和快照。\n\n注意以上操作中的第 3 步，消息发送后，删除操作依然有可能失败，此时，同一事件可能被多次发送到消息队列中。\n不过问题不大，由于事件存在版本，消费者可以轻松找出不需要处理的事件并丢弃它们。\n\n\n## 参考链接\n\n[Implementing event sourcing using a relational database](https://softwaremill.com/implementing-event-sourcing-using-a-relational-database/)\n\n[^1]: [实现领域驱动设计](https://book.douban.com/subject/25844633/)\n","source":"_posts/implement-event-sourcing.md","raw":"---\ntitle: 使用关系型数据库实现事件源模式\ncategory: development\ntags: event sourcing\ndate: 2022-05-16 22:35:51\n---\n\n\n> 关系型数据库是日常开发中最常用的数据库类型，本文记载使用关系型数据库实现事件源模式的要点和一些问题。\n>\n> 要阅读本篇文章，你可能需要先自行了解关系型数据库、事件源模式和领域驱动设计相关知识。\n\n<!-- more -->\n\n## 事件存储\n\n首先考虑事件的存储，实际上只需要四个字段， DDL 如下（以 PostgreSQL 为例）：\n\n```sql\nCREATE TABLE events\n(\n    id        SERIAL      PRIMARY KEY,\n    stream_id VARCHAR(50) NOT NULL,\n    version   BIGINT      NOT NULL,\n    data      TEXT        NOT NULL,\n    UNIQUE (stream_id, version)\n);\n```\n\n其中， `stream_id` 是实体或聚合的唯一标识，也可以把这个字段叫做 `name` 或者其他你喜欢的名字， `version` 是事件的版本，由于事件是只追加的，版本会不断增加，并且对于同一个实体或聚合来说，版本号不会有重复。\n\n`id` 是事件的标识符，由数据库生成即可。\n\n使用这种简单的结构，我们已经可以实现两种事件源模式需要的功能了。首先是获取事件流：\n\n```sql\nSELECT id, stream_id, version, data FROM events\n    WHERE stream_id = :stream_id ORDER BY version ASC;\n```\n\n根据有序的事件流，我们可以重建出一个实体或聚合的最新状态，这是事件源模式的关键功能。\n\n第二项功能是记录事件，使用：\n\n```sql\nINSERT INTO events(stream_id, version, data)\n    VALUES(:stream_id, :current+1, :data);\n```\n\n需要注意的是，这里的 `current+1` 仅仅表示插入数据时应该让版本增加 1，而不是可以直接在 SQL 语句中这样写。\n考虑到主流关系型数据库的默认隔离级别，这种写法会产生一些并发问题。（对于 PostgreSQL ，可以指定隔离级别为 *Repeatable Read* ）\n\n## 投影 (PROJECTION)\n\n事件源模式的另一个问题是无法像传统表结构那样进行过滤，我们使用投影来解决这个问题。\n\n投影是通过提前聚合事件形成的一种视图，我们既可以同步更新投影，也可以异步更新投影。在异步更新时，系统将获得更高的性能，但会存在一定延迟，这时的系统实现的是 *最终一致性* 。\n\n实现最终一致性并不是一件容易的事，在关系型数据库中，为了简单，我们可以先同步更新投影，这种情况下应该利用关系库的一致性保证，即使用 **事务**。\n\n每个事务中我们做两件事：\n\n- 插入新的事件\n- 更新投影\n\n因为事件存储是整个系统的唯一数据源，所以投影可以被轻易放弃、调整结构，只需要重放所有事件即可生成新的投影用来适配客户端的查询需求。\n\n## 快照 (SNAPSHOT)\n\n快照解决事件源模式中的另一个问题：当事件数量不断增加时，重建一个实体或聚合的成本也会不断增加。\n\n可以将快照视为一种特殊的投影，与投影相比，快照最大的不同点是它需要保存版本信息，这样我们就可以在重建时先查询快照，然后仅将快照对应版本之后发生的事件应用在实体或聚合上。\n\n和投影一样，使用关系库时，我们可以在同一个事务中更新快照，不过快照并不需要频繁更新，通常每 50-100 个版本更新一次即可[^1]。\n\n## 滚动升级\n\n引入快照和投影之后，我们失去了一些灵活性，其中很重要的一点就是要如何修改投影和快照的结构。\n\n当条件允许时，最简单的方式是停止服务，删除旧的投影和快照表，然后重放事件并生成一份新的表。然而生产服务并不会允许我们这样做，因此当需要升级时，我们应该考虑以下步骤：\n\n1. 创建新的投影和快照表。\n2. 修改程序，当新的事件写入时，旧表和新表都应该被更新，当然，只有当实体已经存在于新表中时，它才会被更新。\n3. 如果有新的实体或聚合被创建，它会同时被保存到两个表中。\n4. 最后，我们重放所有已有的事件，并将它们聚合后的结果写入新表中。\n5. 当以上步骤完成，新旧两个版本的数据会同步更新，此时我们可以删除旧表和相关逻辑。\n\n## 异步\n\n最后，让我们考虑一下性能问题。当系统成长到一定规模时，我们会很自然地想到采用异步更新投影的方式来改善性能，事件源模式最终通常会引入消息队列（甚至是 Kafka ）。\n\n然而在关系库和消息队列之间并没有一种方式可以维持一致性，无论在数据库事务的哪个阶段发送消息，都可能产生一些副作用。\n\n由于使用不同组件，我们没有方法可以彻底消除副作用，但可以通过一些手段来实现最终一致性：\n\n1. 创建一张队列 (queue) 表 ，用来存放新生成的事件。\n2. 当有新的事件生成时，同时写入事件存储和队列。\n3. 使用一个 **单线程的** 程序轮询队列，分批取出其中的事件并发送到消息队列，然后从队列中删除这些事件。\n4. 创建事件监听器，从消息队列中获取事件并更新投影和快照。\n\n注意以上操作中的第 3 步，消息发送后，删除操作依然有可能失败，此时，同一事件可能被多次发送到消息队列中。\n不过问题不大，由于事件存在版本，消费者可以轻松找出不需要处理的事件并丢弃它们。\n\n\n## 参考链接\n\n[Implementing event sourcing using a relational database](https://softwaremill.com/implementing-event-sourcing-using-a-relational-database/)\n\n[^1]: [实现领域驱动设计](https://book.douban.com/subject/25844633/)\n","slug":"implement-event-sourcing","published":1,"updated":"2023-02-27T16:20:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clen23zga0007wfm0bl0f3cfh","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>关系型数据库是日常开发中最常用的数据库类型，本文记载使用关系型数据库实现事件源模式的要点和一些问题。</p>\n<p>要阅读本篇文章，你可能需要先自行了解关系型数据库、事件源模式和领域驱动设计相关知识。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"事件存储\"><a href=\"#事件存储\" class=\"headerlink\" title=\"事件存储\"></a>事件存储</h2><p>首先考虑事件的存储，实际上只需要四个字段， DDL 如下（以 PostgreSQL 为例）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> events</span><br><span class=\"line\">(</span><br><span class=\"line\">    id        SERIAL      <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    stream_id <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    version   <span class=\"type\">BIGINT</span>      <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    data      TEXT        <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> (stream_id, version)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>其中， <code>stream_id</code> 是实体或聚合的唯一标识，也可以把这个字段叫做 <code>name</code> 或者其他你喜欢的名字， <code>version</code> 是事件的版本，由于事件是只追加的，版本会不断增加，并且对于同一个实体或聚合来说，版本号不会有重复。</p>\n<p><code>id</code> 是事件的标识符，由数据库生成即可。</p>\n<p>使用这种简单的结构，我们已经可以实现两种事件源模式需要的功能了。首先是获取事件流：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> id, stream_id, version, data <span class=\"keyword\">FROM</span> events</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> stream_id <span class=\"operator\">=</span> :stream_id <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> version <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n\n<p>根据有序的事件流，我们可以重建出一个实体或聚合的最新状态，这是事件源模式的关键功能。</p>\n<p>第二项功能是记录事件，使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> events(stream_id, version, data)</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span>(:stream_id, :<span class=\"keyword\">current</span><span class=\"operator\">+</span><span class=\"number\">1</span>, :data);</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，这里的 <code>current+1</code> 仅仅表示插入数据时应该让版本增加 1，而不是可以直接在 SQL 语句中这样写。<br>考虑到主流关系型数据库的默认隔离级别，这种写法会产生一些并发问题。（对于 PostgreSQL ，可以指定隔离级别为 <em>Repeatable Read</em> ）</p>\n<h2 id=\"投影-PROJECTION\"><a href=\"#投影-PROJECTION\" class=\"headerlink\" title=\"投影 (PROJECTION)\"></a>投影 (PROJECTION)</h2><p>事件源模式的另一个问题是无法像传统表结构那样进行过滤，我们使用投影来解决这个问题。</p>\n<p>投影是通过提前聚合事件形成的一种视图，我们既可以同步更新投影，也可以异步更新投影。在异步更新时，系统将获得更高的性能，但会存在一定延迟，这时的系统实现的是 <em>最终一致性</em> 。</p>\n<p>实现最终一致性并不是一件容易的事，在关系型数据库中，为了简单，我们可以先同步更新投影，这种情况下应该利用关系库的一致性保证，即使用 <strong>事务</strong>。</p>\n<p>每个事务中我们做两件事：</p>\n<ul>\n<li>插入新的事件</li>\n<li>更新投影</li>\n</ul>\n<p>因为事件存储是整个系统的唯一数据源，所以投影可以被轻易放弃、调整结构，只需要重放所有事件即可生成新的投影用来适配客户端的查询需求。</p>\n<h2 id=\"快照-SNAPSHOT\"><a href=\"#快照-SNAPSHOT\" class=\"headerlink\" title=\"快照 (SNAPSHOT)\"></a>快照 (SNAPSHOT)</h2><p>快照解决事件源模式中的另一个问题：当事件数量不断增加时，重建一个实体或聚合的成本也会不断增加。</p>\n<p>可以将快照视为一种特殊的投影，与投影相比，快照最大的不同点是它需要保存版本信息，这样我们就可以在重建时先查询快照，然后仅将快照对应版本之后发生的事件应用在实体或聚合上。</p>\n<p>和投影一样，使用关系库时，我们可以在同一个事务中更新快照，不过快照并不需要频繁更新，通常每 50-100 个版本更新一次即可<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"[实现领域驱动设计](https://book.douban.com/subject/25844633/)\n\">[1]</span></a></sup>。</p>\n<h2 id=\"滚动升级\"><a href=\"#滚动升级\" class=\"headerlink\" title=\"滚动升级\"></a>滚动升级</h2><p>引入快照和投影之后，我们失去了一些灵活性，其中很重要的一点就是要如何修改投影和快照的结构。</p>\n<p>当条件允许时，最简单的方式是停止服务，删除旧的投影和快照表，然后重放事件并生成一份新的表。然而生产服务并不会允许我们这样做，因此当需要升级时，我们应该考虑以下步骤：</p>\n<ol>\n<li>创建新的投影和快照表。</li>\n<li>修改程序，当新的事件写入时，旧表和新表都应该被更新，当然，只有当实体已经存在于新表中时，它才会被更新。</li>\n<li>如果有新的实体或聚合被创建，它会同时被保存到两个表中。</li>\n<li>最后，我们重放所有已有的事件，并将它们聚合后的结果写入新表中。</li>\n<li>当以上步骤完成，新旧两个版本的数据会同步更新，此时我们可以删除旧表和相关逻辑。</li>\n</ol>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>最后，让我们考虑一下性能问题。当系统成长到一定规模时，我们会很自然地想到采用异步更新投影的方式来改善性能，事件源模式最终通常会引入消息队列（甚至是 Kafka ）。</p>\n<p>然而在关系库和消息队列之间并没有一种方式可以维持一致性，无论在数据库事务的哪个阶段发送消息，都可能产生一些副作用。</p>\n<p>由于使用不同组件，我们没有方法可以彻底消除副作用，但可以通过一些手段来实现最终一致性：</p>\n<ol>\n<li>创建一张队列 (queue) 表 ，用来存放新生成的事件。</li>\n<li>当有新的事件生成时，同时写入事件存储和队列。</li>\n<li>使用一个 <strong>单线程的</strong> 程序轮询队列，分批取出其中的事件并发送到消息队列，然后从队列中删除这些事件。</li>\n<li>创建事件监听器，从消息队列中获取事件并更新投影和快照。</li>\n</ol>\n<p>注意以上操作中的第 3 步，消息发送后，删除操作依然有可能失败，此时，同一事件可能被多次发送到消息队列中。<br>不过问题不大，由于事件存在版本，消费者可以轻松找出不需要处理的事件并丢弃它们。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://softwaremill.com/implementing-event-sourcing-using-a-relational-database/\">Implementing event sourcing using a relational database</a></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\"><a href=\"https://book.douban.com/subject/25844633/\">实现领域驱动设计</a><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","site":{"data":{}},"length":2033,"excerpt":"<blockquote>\n<p>关系型数据库是日常开发中最常用的数据库类型，本文记载使用关系型数据库实现事件源模式的要点和一些问题。</p>\n<p>要阅读本篇文章，你可能需要先自行了解关系型数据库、事件源模式和领域驱动设计相关知识。</p>\n</blockquote>","more":"<h2 id=\"事件存储\"><a href=\"#事件存储\" class=\"headerlink\" title=\"事件存储\"></a>事件存储</h2><p>首先考虑事件的存储，实际上只需要四个字段， DDL 如下（以 PostgreSQL 为例）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> events</span><br><span class=\"line\">(</span><br><span class=\"line\">    id        SERIAL      <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    stream_id <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    version   <span class=\"type\">BIGINT</span>      <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    data      TEXT        <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> (stream_id, version)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>其中， <code>stream_id</code> 是实体或聚合的唯一标识，也可以把这个字段叫做 <code>name</code> 或者其他你喜欢的名字， <code>version</code> 是事件的版本，由于事件是只追加的，版本会不断增加，并且对于同一个实体或聚合来说，版本号不会有重复。</p>\n<p><code>id</code> 是事件的标识符，由数据库生成即可。</p>\n<p>使用这种简单的结构，我们已经可以实现两种事件源模式需要的功能了。首先是获取事件流：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> id, stream_id, version, data <span class=\"keyword\">FROM</span> events</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> stream_id <span class=\"operator\">=</span> :stream_id <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> version <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n\n<p>根据有序的事件流，我们可以重建出一个实体或聚合的最新状态，这是事件源模式的关键功能。</p>\n<p>第二项功能是记录事件，使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> events(stream_id, version, data)</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span>(:stream_id, :<span class=\"keyword\">current</span><span class=\"operator\">+</span><span class=\"number\">1</span>, :data);</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，这里的 <code>current+1</code> 仅仅表示插入数据时应该让版本增加 1，而不是可以直接在 SQL 语句中这样写。<br>考虑到主流关系型数据库的默认隔离级别，这种写法会产生一些并发问题。（对于 PostgreSQL ，可以指定隔离级别为 <em>Repeatable Read</em> ）</p>\n<h2 id=\"投影-PROJECTION\"><a href=\"#投影-PROJECTION\" class=\"headerlink\" title=\"投影 (PROJECTION)\"></a>投影 (PROJECTION)</h2><p>事件源模式的另一个问题是无法像传统表结构那样进行过滤，我们使用投影来解决这个问题。</p>\n<p>投影是通过提前聚合事件形成的一种视图，我们既可以同步更新投影，也可以异步更新投影。在异步更新时，系统将获得更高的性能，但会存在一定延迟，这时的系统实现的是 <em>最终一致性</em> 。</p>\n<p>实现最终一致性并不是一件容易的事，在关系型数据库中，为了简单，我们可以先同步更新投影，这种情况下应该利用关系库的一致性保证，即使用 <strong>事务</strong>。</p>\n<p>每个事务中我们做两件事：</p>\n<ul>\n<li>插入新的事件</li>\n<li>更新投影</li>\n</ul>\n<p>因为事件存储是整个系统的唯一数据源，所以投影可以被轻易放弃、调整结构，只需要重放所有事件即可生成新的投影用来适配客户端的查询需求。</p>\n<h2 id=\"快照-SNAPSHOT\"><a href=\"#快照-SNAPSHOT\" class=\"headerlink\" title=\"快照 (SNAPSHOT)\"></a>快照 (SNAPSHOT)</h2><p>快照解决事件源模式中的另一个问题：当事件数量不断增加时，重建一个实体或聚合的成本也会不断增加。</p>\n<p>可以将快照视为一种特殊的投影，与投影相比，快照最大的不同点是它需要保存版本信息，这样我们就可以在重建时先查询快照，然后仅将快照对应版本之后发生的事件应用在实体或聚合上。</p>\n<p>和投影一样，使用关系库时，我们可以在同一个事务中更新快照，不过快照并不需要频繁更新，通常每 50-100 个版本更新一次即可<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"[实现领域驱动设计](https://book.douban.com/subject/25844633/)\n\">[1]</span></a></sup>。</p>\n<h2 id=\"滚动升级\"><a href=\"#滚动升级\" class=\"headerlink\" title=\"滚动升级\"></a>滚动升级</h2><p>引入快照和投影之后，我们失去了一些灵活性，其中很重要的一点就是要如何修改投影和快照的结构。</p>\n<p>当条件允许时，最简单的方式是停止服务，删除旧的投影和快照表，然后重放事件并生成一份新的表。然而生产服务并不会允许我们这样做，因此当需要升级时，我们应该考虑以下步骤：</p>\n<ol>\n<li>创建新的投影和快照表。</li>\n<li>修改程序，当新的事件写入时，旧表和新表都应该被更新，当然，只有当实体已经存在于新表中时，它才会被更新。</li>\n<li>如果有新的实体或聚合被创建，它会同时被保存到两个表中。</li>\n<li>最后，我们重放所有已有的事件，并将它们聚合后的结果写入新表中。</li>\n<li>当以上步骤完成，新旧两个版本的数据会同步更新，此时我们可以删除旧表和相关逻辑。</li>\n</ol>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>最后，让我们考虑一下性能问题。当系统成长到一定规模时，我们会很自然地想到采用异步更新投影的方式来改善性能，事件源模式最终通常会引入消息队列（甚至是 Kafka ）。</p>\n<p>然而在关系库和消息队列之间并没有一种方式可以维持一致性，无论在数据库事务的哪个阶段发送消息，都可能产生一些副作用。</p>\n<p>由于使用不同组件，我们没有方法可以彻底消除副作用，但可以通过一些手段来实现最终一致性：</p>\n<ol>\n<li>创建一张队列 (queue) 表 ，用来存放新生成的事件。</li>\n<li>当有新的事件生成时，同时写入事件存储和队列。</li>\n<li>使用一个 <strong>单线程的</strong> 程序轮询队列，分批取出其中的事件并发送到消息队列，然后从队列中删除这些事件。</li>\n<li>创建事件监听器，从消息队列中获取事件并更新投影和快照。</li>\n</ol>\n<p>注意以上操作中的第 3 步，消息发送后，删除操作依然有可能失败，此时，同一事件可能被多次发送到消息队列中。<br>不过问题不大，由于事件存在版本，消费者可以轻松找出不需要处理的事件并丢弃它们。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://softwaremill.com/implementing-event-sourcing-using-a-relational-database/\">Implementing event sourcing using a relational database</a></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\"><a href=\"https://book.douban.com/subject/25844633/\">实现领域驱动设计</a><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>"},{"title":"珍惜时间，Ruby on Rails API 开发指北","date":"2022-05-19T15:43:04.000Z","_content":"\n> 继上次简单写了一些关于 Event Sourcing 的内容后，感觉进入了一段情绪低迷期，决定学一些和找工作无关的东西。\n>\n> 实际上，绝大多数项目并不需要使用领域驱动设计，也不需要支持高并发，在这种情况下，为了节省宝贵的时间，我们可以使用一种简单且有效的模式：活动记录 (Active Record)。\n\n<!-- more -->\n\n## Active Record Pattern\n\n活动记录的特点是 **一个模型类对应关系型数据库的一个表，一个实例对应数据库中的一行记录**。活动记录一般兼有 ORM 的功能，但并不是简单的 ORM，目前 Python 中常用的 ORM，如 SQLAlchemy 和 Django ORM 都实现了 Active Record 的功能。\n\n关于 Active Record 模式的著名案例是 *全栈 Web 开发框架 Ruby on Rails*[^1]，今天我们就用它来实现一个简单的接口，感受一下它的魅力。\n\n## 需求\n\n我们实现一个不复杂但是很常见的需求：呈现一个树形结构。树的每一个节点 (node) 都拥有一个名字，最后需要提供一个可以展示整个树的 JSON 结构的 Web API。\n\n它可能长这个样子：\n\n```\n- root node\n    - child node 1\n    - child node 2\n......\n```\n\n## 分析\n\n有很多种在关系型数据库中保存树形结构的方式，但各有优缺点，在这个案例中，我们选择最简单的一种：自关联。\n\n具体来说，我们为每个节点定义一个 `parent_id` 字段，该字段保存节点父亲节点的唯一标识。\n\n## 实现\n\n### 创建项目\n\n首先，我们跳过环境的安装教学，毕竟我并不打算做一个 「手把手教你xxx」 系列。\n\n简单贴一下 macOS 下使用 Homebrew 安装所需环境的几条命令：\n\n```bash\nbrew install rbenv\nrbenv install 3.1.2\nrbenv global 3.1.2\ngem install rails\n```\n\n安装好 Rails 之后，使用如下命令创建项目：\n\n```bash\nrails new demo --api\ncd demo\n```\n\n结尾的 `--api` 代表这是一个单纯的 API 项目，Rails 不会加载与前端相关的组件。\n\n进入项目目录后，打开 `Gemfile` 文件，找到如下行：\n\n```ruby\n# Build JSON APIs with ease [https://github.com/rails/jbuilder]\n# gem \"jbuilder\"\n```\n\n取消第二行的注释，`jbuilder` 是一个序列化 JSON 内容的工具，它实现了一个简单好用的 DSL ，可以减少我们的工作。\n\n### 创建脚手架\n\n回顾一下我们需要的模型，对它的描述如下：\n\n- 节点 (node) 有自己的名字。\n- 节点拥有一个父亲节点 (parent)，如果父亲为空，则该节点为根节点。\n- 节点拥有许多子节点 (children)。\n\n我们使用 Rails 的生成工具创建一个包含 CRUD 操作的模板：\n\n```bash\nrails generate scaffold node name:string parent:references\n```\n\n命令的前半部分告诉 Rails 我们需要生成一个名叫 `node` 的脚手架，后半部分指明我们的模型包含两部分内容：\n一个字符串类型的 `name` 和一个引用类型 `parent` 。\n\n顺利的话，你将会看到以下输出：\n\n```bash\n      invoke  active_record\n      create    db/migrate/20220519154951_create_nodes.rb\n      create    app/models/node.rb\n      invoke    test_unit\n      create      test/models/node_test.rb\n      create      test/fixtures/nodes.yml\n      invoke  resource_route\n       route    resources :nodes\n      invoke  scaffold_controller\n      create    app/controllers/nodes_controller.rb\n      invoke    resource_route\n      invoke    test_unit\n      create      test/controllers/nodes_controller_test.rb\n      invoke    jbuilder\n      create      app/views/nodes/index.json.jbuilder\n      create      app/views/nodes/show.json.jbuilder\n      create      app/views/nodes/_node.json.jbuilder\n```\n\nRails 为我们创建了两个 Active Record 类，分别表示数据库迁移和模型，并创建了针对模型的单元测试。\n\nRails 还为我们添加了资源 `nodes` 的路由。\n\n最后，Rails 为我们生成了 `nodes` 的 Controller ，对应的单元测试，以及 `jbuilder` 视图。\n\n### 修改模型\n\n自动生成的脚手架存在一些问题，首先，现在许多项目不允许在数据库中创建外键，虽然我并不能理解这种不分实际情况通通禁止的做法，但我们可以稍作修改，让 Rails 不要创建外键。\n\n在 `db/migrate/` 目录下，找到生成的 `.rb` 文件，将其中的 `foreign_key: true` 修改为 `foreign_key: false`，这将会告诉 Rails 在该列建立一个简单的索引而不是外键约束。\n\n顺便，由于我们的根节点不会有父亲，所以将 `null: false` 改为 `null: true` 来允许空值。\n\n第二个问题是我们使用自关联，但指定了引用 `parent` ，我们需要告诉 Rails 它是什么。\n\n打开 `app/models/node.rb` 文件，修改模型中的关系定义如下：\n\n```ruby\nclass Node < ApplicationRecord\n  belongs_to :parent, class_name: 'Node', optional: true\n  has_many :children, class_name: 'Node', foreign_key: 'parent_id', dependent: :destroy\nend\n```\n\n我们通过 `class_name` 告诉 Rails `parent` 使用哪一个模型，并通过 `has_many` 添加了反向关系，指定使用的字段名为 `parent_id` 。最后，我们规定在父亲节点被删除时，子节点也会被删除。\n\n现在，我们可以使用 `rails db:migrate` 生成数据库。默认的数据库是 SQLite ，使用 Rails 提供的工具进入数据库查看生成的表结构（当然你也可以自己使用 `sqlite3` 查看，数据库在 `db/development.sqlite3` 文件中）：\n\n```bash\nrails dbconsole\nsqlite> .schema nodes\nCREATE TABLE IF NOT EXISTS \"nodes\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"name\" varchar, \"parent_id\" integer, \"created_at\" datetime(6) NOT NULL, \"updated_at\" datetime(6) NOT NULL);\nCREATE INDEX \"index_nodes_on_parent_id\" ON \"nodes\" (\"parent_id\");\nsqlite> .exit\n```\n\n可以看到， Rails 创建了索引而不是外键约束，并默认添加了 `id` `created_at` `updated_at` 字段。\n\n### 预设数据\n\n为了方便接口测试，我们先生成一些预设数据。\n\n打开 `db/seeds.rb` 文件，添加三条记录：\n\n```ruby\nroot = Node.create name: 'root'\nNode.create name: 'child1', parent: root\nNode.create name: 'child2', parent: root\n```\n\n然后使用 `rails db:seed` 让它生效，这样我们的数据库中就有了三条记录。\n\n### 查看接口\n\n修改接口之前，我们先来看一看脚手架生成的方法是什么样子的。\n\n使用 `rails server` 启动服务，然后访问 `http://localhost:3000/nodes.json`，你应该会看到刚才添加的三条记录：\n\n```bash\n$ http :3000/nodes.json  # use httpie\nHTTP/1.1 200 OK\n... # HTTP HEADERS\n\n[\n    {\n        \"created_at\": \"2022-05-19T15:18:07.798Z\",\n        \"id\": 1,\n        \"name\": \"root\",\n        \"parent_id\": null,\n        \"updated_at\": \"2022-05-19T15:18:07.798Z\",\n        \"url\": \"http://localhost:3000/nodes/1.json\"\n    },\n    {\n        \"created_at\": \"2022-05-19T15:18:07.803Z\",\n        \"id\": 2,\n        \"name\": \"child1\",\n        \"parent_id\": 1,\n        \"updated_at\": \"2022-05-19T15:18:07.803Z\",\n        \"url\": \"http://localhost:3000/nodes/2.json\"\n    },\n    {\n        \"created_at\": \"2022-05-19T15:18:07.804Z\",\n        \"id\": 3,\n        \"name\": \"child2\",\n        \"parent_id\": 1,\n        \"updated_at\": \"2022-05-19T15:18:07.804Z\",\n        \"url\": \"http://localhost:3000/nodes/3.json\"\n    }\n]\n```\n\n我们的目标就是将它修改为树状结构。\n\n### 修改接口\n\n为了修改接口，我们首先需要知道 Rails 是怎么处理我们的请求的。脚手架模板为我们生成了 MVC 中需要的全部组件以及一些路由，让我们使用 `rails routes` 命令查看路由，这里只列出第一条：\n\n```bash\nnodes GET /nodes(.:format) nodes#index\n```\n\n这条路由就是我们刚刚访问的地址，最后的部分由 `Controller#Action` 组成，也就是说，我们的目标是 `nodes_controller` 中的 `index` 方法。\n\n打开 `app/controllers/nodes_controller.rb` 文件，找到 `index` 方法，将它修改为：\n\n```ruby\ndef index\n  @nodes = Node.where parent: nil\nend\n```\n\n这样，接口将只返回根节点：\n\n```bash\n$ http :3000/nodes.json\nHTTP/1.1 200 OK\n...\n\n[\n    {\n        \"created_at\": \"2022-05-19T15:18:07.798Z\",\n        \"id\": 1,\n        \"name\": \"root\",\n        \"parent_id\": null,\n        \"updated_at\": \"2022-05-19T15:18:07.798Z\",\n        \"url\": \"http://localhost:3000/nodes/1.json\"\n    }\n]\n```\n\n`@nodes` 的渲染将委派给 `jbuilder` ，我们可以在 `app/views/nodes/_node.json.jbuilder` 文件中找到它的模板，为它添加一个 `children` 属性：\n\n```ruby\njson.extract! node, :id, :name, :parent_id, :created_at, :updated_at\njson.url node_url(node, format: :json)\njson.children do\n  json.array! node.children, partial: 'nodes/node', as: :node\nend\n```\n\n这段代码使得 `node` 递归地访问自己的孩子节点，最终渲染出整个树形结构，这样我们就完成了接口的修改。\n\n最后看一看修改后的接口返回：\n\n```bash\n$ http :3000/nodes.json\nHTTP/1.1 200 OK\n...\n\n[\n    {\n        \"children\": [\n            {\n                \"children\": [],\n                \"created_at\": \"2022-05-19T15:18:07.803Z\",\n                \"id\": 2,\n                \"name\": \"child1\",\n                \"parent_id\": 1,\n                \"updated_at\": \"2022-05-19T15:18:07.803Z\",\n                \"url\": \"http://localhost:3000/nodes/2.json\"\n            },\n            {\n                \"children\": [],\n                \"created_at\": \"2022-05-19T15:18:07.804Z\",\n                \"id\": 3,\n                \"name\": \"child2\",\n                \"parent_id\": 1,\n                \"updated_at\": \"2022-05-19T15:18:07.804Z\",\n                \"url\": \"http://localhost:3000/nodes/3.json\"\n            }\n        ],\n        \"created_at\": \"2022-05-19T15:18:07.798Z\",\n        \"id\": 1,\n        \"name\": \"root\",\n        \"parent_id\": null,\n        \"updated_at\": \"2022-05-19T15:18:07.798Z\",\n        \"url\": \"http://localhost:3000/nodes/1.json\"\n    }\n]\n```\n\n完成！可以放下工作去享受生活了！\n\n## 结语\n\n这并不是一篇正经的教程文章，在 Ruby on Rails 的时代，人们遵从「宁花机器一分，不花程序员一秒」的 UNIX 哲学，希望大家也可以时常放下工作，享受生活。\n\n最后，如果你对 Ruby on Rails 产生了兴趣，可以去它的官方网站学习。\n\n[^1]: [Ruby on Rails](http://www.rubyonrails.org/)\n","source":"_posts/simple-api-with-rails.md","raw":"---\ntitle: 珍惜时间，Ruby on Rails API 开发指北\ncategory: development\ntags:\n  - ruby\n  - rails\n  - active record\ndate: 2022-05-19 23:43:04\n---\n\n> 继上次简单写了一些关于 Event Sourcing 的内容后，感觉进入了一段情绪低迷期，决定学一些和找工作无关的东西。\n>\n> 实际上，绝大多数项目并不需要使用领域驱动设计，也不需要支持高并发，在这种情况下，为了节省宝贵的时间，我们可以使用一种简单且有效的模式：活动记录 (Active Record)。\n\n<!-- more -->\n\n## Active Record Pattern\n\n活动记录的特点是 **一个模型类对应关系型数据库的一个表，一个实例对应数据库中的一行记录**。活动记录一般兼有 ORM 的功能，但并不是简单的 ORM，目前 Python 中常用的 ORM，如 SQLAlchemy 和 Django ORM 都实现了 Active Record 的功能。\n\n关于 Active Record 模式的著名案例是 *全栈 Web 开发框架 Ruby on Rails*[^1]，今天我们就用它来实现一个简单的接口，感受一下它的魅力。\n\n## 需求\n\n我们实现一个不复杂但是很常见的需求：呈现一个树形结构。树的每一个节点 (node) 都拥有一个名字，最后需要提供一个可以展示整个树的 JSON 结构的 Web API。\n\n它可能长这个样子：\n\n```\n- root node\n    - child node 1\n    - child node 2\n......\n```\n\n## 分析\n\n有很多种在关系型数据库中保存树形结构的方式，但各有优缺点，在这个案例中，我们选择最简单的一种：自关联。\n\n具体来说，我们为每个节点定义一个 `parent_id` 字段，该字段保存节点父亲节点的唯一标识。\n\n## 实现\n\n### 创建项目\n\n首先，我们跳过环境的安装教学，毕竟我并不打算做一个 「手把手教你xxx」 系列。\n\n简单贴一下 macOS 下使用 Homebrew 安装所需环境的几条命令：\n\n```bash\nbrew install rbenv\nrbenv install 3.1.2\nrbenv global 3.1.2\ngem install rails\n```\n\n安装好 Rails 之后，使用如下命令创建项目：\n\n```bash\nrails new demo --api\ncd demo\n```\n\n结尾的 `--api` 代表这是一个单纯的 API 项目，Rails 不会加载与前端相关的组件。\n\n进入项目目录后，打开 `Gemfile` 文件，找到如下行：\n\n```ruby\n# Build JSON APIs with ease [https://github.com/rails/jbuilder]\n# gem \"jbuilder\"\n```\n\n取消第二行的注释，`jbuilder` 是一个序列化 JSON 内容的工具，它实现了一个简单好用的 DSL ，可以减少我们的工作。\n\n### 创建脚手架\n\n回顾一下我们需要的模型，对它的描述如下：\n\n- 节点 (node) 有自己的名字。\n- 节点拥有一个父亲节点 (parent)，如果父亲为空，则该节点为根节点。\n- 节点拥有许多子节点 (children)。\n\n我们使用 Rails 的生成工具创建一个包含 CRUD 操作的模板：\n\n```bash\nrails generate scaffold node name:string parent:references\n```\n\n命令的前半部分告诉 Rails 我们需要生成一个名叫 `node` 的脚手架，后半部分指明我们的模型包含两部分内容：\n一个字符串类型的 `name` 和一个引用类型 `parent` 。\n\n顺利的话，你将会看到以下输出：\n\n```bash\n      invoke  active_record\n      create    db/migrate/20220519154951_create_nodes.rb\n      create    app/models/node.rb\n      invoke    test_unit\n      create      test/models/node_test.rb\n      create      test/fixtures/nodes.yml\n      invoke  resource_route\n       route    resources :nodes\n      invoke  scaffold_controller\n      create    app/controllers/nodes_controller.rb\n      invoke    resource_route\n      invoke    test_unit\n      create      test/controllers/nodes_controller_test.rb\n      invoke    jbuilder\n      create      app/views/nodes/index.json.jbuilder\n      create      app/views/nodes/show.json.jbuilder\n      create      app/views/nodes/_node.json.jbuilder\n```\n\nRails 为我们创建了两个 Active Record 类，分别表示数据库迁移和模型，并创建了针对模型的单元测试。\n\nRails 还为我们添加了资源 `nodes` 的路由。\n\n最后，Rails 为我们生成了 `nodes` 的 Controller ，对应的单元测试，以及 `jbuilder` 视图。\n\n### 修改模型\n\n自动生成的脚手架存在一些问题，首先，现在许多项目不允许在数据库中创建外键，虽然我并不能理解这种不分实际情况通通禁止的做法，但我们可以稍作修改，让 Rails 不要创建外键。\n\n在 `db/migrate/` 目录下，找到生成的 `.rb` 文件，将其中的 `foreign_key: true` 修改为 `foreign_key: false`，这将会告诉 Rails 在该列建立一个简单的索引而不是外键约束。\n\n顺便，由于我们的根节点不会有父亲，所以将 `null: false` 改为 `null: true` 来允许空值。\n\n第二个问题是我们使用自关联，但指定了引用 `parent` ，我们需要告诉 Rails 它是什么。\n\n打开 `app/models/node.rb` 文件，修改模型中的关系定义如下：\n\n```ruby\nclass Node < ApplicationRecord\n  belongs_to :parent, class_name: 'Node', optional: true\n  has_many :children, class_name: 'Node', foreign_key: 'parent_id', dependent: :destroy\nend\n```\n\n我们通过 `class_name` 告诉 Rails `parent` 使用哪一个模型，并通过 `has_many` 添加了反向关系，指定使用的字段名为 `parent_id` 。最后，我们规定在父亲节点被删除时，子节点也会被删除。\n\n现在，我们可以使用 `rails db:migrate` 生成数据库。默认的数据库是 SQLite ，使用 Rails 提供的工具进入数据库查看生成的表结构（当然你也可以自己使用 `sqlite3` 查看，数据库在 `db/development.sqlite3` 文件中）：\n\n```bash\nrails dbconsole\nsqlite> .schema nodes\nCREATE TABLE IF NOT EXISTS \"nodes\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"name\" varchar, \"parent_id\" integer, \"created_at\" datetime(6) NOT NULL, \"updated_at\" datetime(6) NOT NULL);\nCREATE INDEX \"index_nodes_on_parent_id\" ON \"nodes\" (\"parent_id\");\nsqlite> .exit\n```\n\n可以看到， Rails 创建了索引而不是外键约束，并默认添加了 `id` `created_at` `updated_at` 字段。\n\n### 预设数据\n\n为了方便接口测试，我们先生成一些预设数据。\n\n打开 `db/seeds.rb` 文件，添加三条记录：\n\n```ruby\nroot = Node.create name: 'root'\nNode.create name: 'child1', parent: root\nNode.create name: 'child2', parent: root\n```\n\n然后使用 `rails db:seed` 让它生效，这样我们的数据库中就有了三条记录。\n\n### 查看接口\n\n修改接口之前，我们先来看一看脚手架生成的方法是什么样子的。\n\n使用 `rails server` 启动服务，然后访问 `http://localhost:3000/nodes.json`，你应该会看到刚才添加的三条记录：\n\n```bash\n$ http :3000/nodes.json  # use httpie\nHTTP/1.1 200 OK\n... # HTTP HEADERS\n\n[\n    {\n        \"created_at\": \"2022-05-19T15:18:07.798Z\",\n        \"id\": 1,\n        \"name\": \"root\",\n        \"parent_id\": null,\n        \"updated_at\": \"2022-05-19T15:18:07.798Z\",\n        \"url\": \"http://localhost:3000/nodes/1.json\"\n    },\n    {\n        \"created_at\": \"2022-05-19T15:18:07.803Z\",\n        \"id\": 2,\n        \"name\": \"child1\",\n        \"parent_id\": 1,\n        \"updated_at\": \"2022-05-19T15:18:07.803Z\",\n        \"url\": \"http://localhost:3000/nodes/2.json\"\n    },\n    {\n        \"created_at\": \"2022-05-19T15:18:07.804Z\",\n        \"id\": 3,\n        \"name\": \"child2\",\n        \"parent_id\": 1,\n        \"updated_at\": \"2022-05-19T15:18:07.804Z\",\n        \"url\": \"http://localhost:3000/nodes/3.json\"\n    }\n]\n```\n\n我们的目标就是将它修改为树状结构。\n\n### 修改接口\n\n为了修改接口，我们首先需要知道 Rails 是怎么处理我们的请求的。脚手架模板为我们生成了 MVC 中需要的全部组件以及一些路由，让我们使用 `rails routes` 命令查看路由，这里只列出第一条：\n\n```bash\nnodes GET /nodes(.:format) nodes#index\n```\n\n这条路由就是我们刚刚访问的地址，最后的部分由 `Controller#Action` 组成，也就是说，我们的目标是 `nodes_controller` 中的 `index` 方法。\n\n打开 `app/controllers/nodes_controller.rb` 文件，找到 `index` 方法，将它修改为：\n\n```ruby\ndef index\n  @nodes = Node.where parent: nil\nend\n```\n\n这样，接口将只返回根节点：\n\n```bash\n$ http :3000/nodes.json\nHTTP/1.1 200 OK\n...\n\n[\n    {\n        \"created_at\": \"2022-05-19T15:18:07.798Z\",\n        \"id\": 1,\n        \"name\": \"root\",\n        \"parent_id\": null,\n        \"updated_at\": \"2022-05-19T15:18:07.798Z\",\n        \"url\": \"http://localhost:3000/nodes/1.json\"\n    }\n]\n```\n\n`@nodes` 的渲染将委派给 `jbuilder` ，我们可以在 `app/views/nodes/_node.json.jbuilder` 文件中找到它的模板，为它添加一个 `children` 属性：\n\n```ruby\njson.extract! node, :id, :name, :parent_id, :created_at, :updated_at\njson.url node_url(node, format: :json)\njson.children do\n  json.array! node.children, partial: 'nodes/node', as: :node\nend\n```\n\n这段代码使得 `node` 递归地访问自己的孩子节点，最终渲染出整个树形结构，这样我们就完成了接口的修改。\n\n最后看一看修改后的接口返回：\n\n```bash\n$ http :3000/nodes.json\nHTTP/1.1 200 OK\n...\n\n[\n    {\n        \"children\": [\n            {\n                \"children\": [],\n                \"created_at\": \"2022-05-19T15:18:07.803Z\",\n                \"id\": 2,\n                \"name\": \"child1\",\n                \"parent_id\": 1,\n                \"updated_at\": \"2022-05-19T15:18:07.803Z\",\n                \"url\": \"http://localhost:3000/nodes/2.json\"\n            },\n            {\n                \"children\": [],\n                \"created_at\": \"2022-05-19T15:18:07.804Z\",\n                \"id\": 3,\n                \"name\": \"child2\",\n                \"parent_id\": 1,\n                \"updated_at\": \"2022-05-19T15:18:07.804Z\",\n                \"url\": \"http://localhost:3000/nodes/3.json\"\n            }\n        ],\n        \"created_at\": \"2022-05-19T15:18:07.798Z\",\n        \"id\": 1,\n        \"name\": \"root\",\n        \"parent_id\": null,\n        \"updated_at\": \"2022-05-19T15:18:07.798Z\",\n        \"url\": \"http://localhost:3000/nodes/1.json\"\n    }\n]\n```\n\n完成！可以放下工作去享受生活了！\n\n## 结语\n\n这并不是一篇正经的教程文章，在 Ruby on Rails 的时代，人们遵从「宁花机器一分，不花程序员一秒」的 UNIX 哲学，希望大家也可以时常放下工作，享受生活。\n\n最后，如果你对 Ruby on Rails 产生了兴趣，可以去它的官方网站学习。\n\n[^1]: [Ruby on Rails](http://www.rubyonrails.org/)\n","slug":"simple-api-with-rails","published":1,"updated":"2023-02-27T16:20:22.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clen23zgb0008wfm0aocwcz7f","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>继上次简单写了一些关于 Event Sourcing 的内容后，感觉进入了一段情绪低迷期，决定学一些和找工作无关的东西。</p>\n<p>实际上，绝大多数项目并不需要使用领域驱动设计，也不需要支持高并发，在这种情况下，为了节省宝贵的时间，我们可以使用一种简单且有效的模式：活动记录 (Active Record)。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Active-Record-Pattern\"><a href=\"#Active-Record-Pattern\" class=\"headerlink\" title=\"Active Record Pattern\"></a>Active Record Pattern</h2><p>活动记录的特点是 <strong>一个模型类对应关系型数据库的一个表，一个实例对应数据库中的一行记录</strong>。活动记录一般兼有 ORM 的功能，但并不是简单的 ORM，目前 Python 中常用的 ORM，如 SQLAlchemy 和 Django ORM 都实现了 Active Record 的功能。</p>\n<p>关于 Active Record 模式的著名案例是 <em>全栈 Web 开发框架 Ruby on Rails</em><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"[Ruby on Rails](http://www.rubyonrails.org/)\n\">[1]</span></a></sup>，今天我们就用它来实现一个简单的接口，感受一下它的魅力。</p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>我们实现一个不复杂但是很常见的需求：呈现一个树形结构。树的每一个节点 (node) 都拥有一个名字，最后需要提供一个可以展示整个树的 JSON 结构的 Web API。</p>\n<p>它可能长这个样子：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- root <span class=\"keyword\">node</span></span><br><span class=\"line\">    <span class=\"title\">- child</span> <span class=\"keyword\">node</span> <span class=\"title\">1</span></span><br><span class=\"line\">    - child <span class=\"keyword\">node</span> <span class=\"title\">2</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>有很多种在关系型数据库中保存树形结构的方式，但各有优缺点，在这个案例中，我们选择最简单的一种：自关联。</p>\n<p>具体来说，我们为每个节点定义一个 <code>parent_id</code> 字段，该字段保存节点父亲节点的唯一标识。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>首先，我们跳过环境的安装教学，毕竟我并不打算做一个 「手把手教你xxx」 系列。</p>\n<p>简单贴一下 macOS 下使用 Homebrew 安装所需环境的几条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install rbenv</span><br><span class=\"line\">rbenv install 3.1.2</span><br><span class=\"line\">rbenv global 3.1.2</span><br><span class=\"line\">gem install rails</span><br></pre></td></tr></table></figure>\n\n<p>安装好 Rails 之后，使用如下命令创建项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails new demo --api</span><br><span class=\"line\"><span class=\"built_in\">cd</span> demo</span><br></pre></td></tr></table></figure>\n\n<p>结尾的 <code>--api</code> 代表这是一个单纯的 API 项目，Rails 不会加载与前端相关的组件。</p>\n<p>进入项目目录后，打开 <code>Gemfile</code> 文件，找到如下行：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Build JSON APIs with ease [https://github.com/rails/jbuilder]</span></span><br><span class=\"line\"><span class=\"comment\"># gem &quot;jbuilder&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>取消第二行的注释，<code>jbuilder</code> 是一个序列化 JSON 内容的工具，它实现了一个简单好用的 DSL ，可以减少我们的工作。</p>\n<h3 id=\"创建脚手架\"><a href=\"#创建脚手架\" class=\"headerlink\" title=\"创建脚手架\"></a>创建脚手架</h3><p>回顾一下我们需要的模型，对它的描述如下：</p>\n<ul>\n<li>节点 (node) 有自己的名字。</li>\n<li>节点拥有一个父亲节点 (parent)，如果父亲为空，则该节点为根节点。</li>\n<li>节点拥有许多子节点 (children)。</li>\n</ul>\n<p>我们使用 Rails 的生成工具创建一个包含 CRUD 操作的模板：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails generate scaffold node name:string parent:references</span><br></pre></td></tr></table></figure>\n\n<p>命令的前半部分告诉 Rails 我们需要生成一个名叫 <code>node</code> 的脚手架，后半部分指明我们的模型包含两部分内容：<br>一个字符串类型的 <code>name</code> 和一个引用类型 <code>parent</code> 。</p>\n<p>顺利的话，你将会看到以下输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">invoke  active_record</span><br><span class=\"line\">create    db/migrate/20220519154951_create_nodes.rb</span><br><span class=\"line\">create    app/models/node.rb</span><br><span class=\"line\">invoke    test_unit</span><br><span class=\"line\">create      <span class=\"built_in\">test</span>/models/node_test.rb</span><br><span class=\"line\">create      <span class=\"built_in\">test</span>/fixtures/nodes.yml</span><br><span class=\"line\">invoke  resource_route</span><br><span class=\"line\"> route    resources :nodes</span><br><span class=\"line\">invoke  scaffold_controller</span><br><span class=\"line\">create    app/controllers/nodes_controller.rb</span><br><span class=\"line\">invoke    resource_route</span><br><span class=\"line\">invoke    test_unit</span><br><span class=\"line\">create      <span class=\"built_in\">test</span>/controllers/nodes_controller_test.rb</span><br><span class=\"line\">invoke    jbuilder</span><br><span class=\"line\">create      app/views/nodes/index.json.jbuilder</span><br><span class=\"line\">create      app/views/nodes/show.json.jbuilder</span><br><span class=\"line\">create      app/views/nodes/_node.json.jbuilder</span><br></pre></td></tr></table></figure>\n\n<p>Rails 为我们创建了两个 Active Record 类，分别表示数据库迁移和模型，并创建了针对模型的单元测试。</p>\n<p>Rails 还为我们添加了资源 <code>nodes</code> 的路由。</p>\n<p>最后，Rails 为我们生成了 <code>nodes</code> 的 Controller ，对应的单元测试，以及 <code>jbuilder</code> 视图。</p>\n<h3 id=\"修改模型\"><a href=\"#修改模型\" class=\"headerlink\" title=\"修改模型\"></a>修改模型</h3><p>自动生成的脚手架存在一些问题，首先，现在许多项目不允许在数据库中创建外键，虽然我并不能理解这种不分实际情况通通禁止的做法，但我们可以稍作修改，让 Rails 不要创建外键。</p>\n<p>在 <code>db/migrate/</code> 目录下，找到生成的 <code>.rb</code> 文件，将其中的 <code>foreign_key: true</code> 修改为 <code>foreign_key: false</code>，这将会告诉 Rails 在该列建立一个简单的索引而不是外键约束。</p>\n<p>顺便，由于我们的根节点不会有父亲，所以将 <code>null: false</code> 改为 <code>null: true</code> 来允许空值。</p>\n<p>第二个问题是我们使用自关联，但指定了引用 <code>parent</code> ，我们需要告诉 Rails 它是什么。</p>\n<p>打开 <code>app/models/node.rb</code> 文件，修改模型中的关系定义如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &lt; <span class=\"title class_ inherited__\">ApplicationRecord</span></span><br><span class=\"line\">  belongs_to <span class=\"symbol\">:parent</span>, <span class=\"symbol\">class_name:</span> <span class=\"string\">&#x27;Node&#x27;</span>, <span class=\"symbol\">optional:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  has_many <span class=\"symbol\">:children</span>, <span class=\"symbol\">class_name:</span> <span class=\"string\">&#x27;Node&#x27;</span>, <span class=\"symbol\">foreign_key:</span> <span class=\"string\">&#x27;parent_id&#x27;</span>, <span class=\"symbol\">dependent:</span> <span class=\"symbol\">:destroy</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>我们通过 <code>class_name</code> 告诉 Rails <code>parent</code> 使用哪一个模型，并通过 <code>has_many</code> 添加了反向关系，指定使用的字段名为 <code>parent_id</code> 。最后，我们规定在父亲节点被删除时，子节点也会被删除。</p>\n<p>现在，我们可以使用 <code>rails db:migrate</code> 生成数据库。默认的数据库是 SQLite ，使用 Rails 提供的工具进入数据库查看生成的表结构（当然你也可以自己使用 <code>sqlite3</code> 查看，数据库在 <code>db/development.sqlite3</code> 文件中）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails dbconsole</span><br><span class=\"line\">sqlite&gt; .schema nodes</span><br><span class=\"line\">CREATE TABLE IF NOT EXISTS <span class=\"string\">&quot;nodes&quot;</span> (<span class=\"string\">&quot;id&quot;</span> <span class=\"built_in\">integer</span> PRIMARY KEY AUTOINCREMENT NOT NULL, <span class=\"string\">&quot;name&quot;</span> varchar, <span class=\"string\">&quot;parent_id&quot;</span> <span class=\"built_in\">integer</span>, <span class=\"string\">&quot;created_at&quot;</span> datetime(6) NOT NULL, <span class=\"string\">&quot;updated_at&quot;</span> datetime(6) NOT NULL);</span><br><span class=\"line\">CREATE INDEX <span class=\"string\">&quot;index_nodes_on_parent_id&quot;</span> ON <span class=\"string\">&quot;nodes&quot;</span> (<span class=\"string\">&quot;parent_id&quot;</span>);</span><br><span class=\"line\">sqlite&gt; .<span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到， Rails 创建了索引而不是外键约束，并默认添加了 <code>id</code> <code>created_at</code> <code>updated_at</code> 字段。</p>\n<h3 id=\"预设数据\"><a href=\"#预设数据\" class=\"headerlink\" title=\"预设数据\"></a>预设数据</h3><p>为了方便接口测试，我们先生成一些预设数据。</p>\n<p>打开 <code>db/seeds.rb</code> 文件，添加三条记录：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = <span class=\"title class_\">Node</span>.create <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Node</span>.create <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;child1&#x27;</span>, <span class=\"symbol\">parent:</span> root</span><br><span class=\"line\"><span class=\"title class_\">Node</span>.create <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;child2&#x27;</span>, <span class=\"symbol\">parent:</span> root</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 <code>rails db:seed</code> 让它生效，这样我们的数据库中就有了三条记录。</p>\n<h3 id=\"查看接口\"><a href=\"#查看接口\" class=\"headerlink\" title=\"查看接口\"></a>查看接口</h3><p>修改接口之前，我们先来看一看脚手架生成的方法是什么样子的。</p>\n<p>使用 <code>rails server</code> 启动服务，然后访问 <code>http://localhost:3000/nodes.json</code>，你应该会看到刚才添加的三条记录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ http :3000/nodes.json  <span class=\"comment\"># use httpie</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">... <span class=\"comment\"># HTTP HEADERS</span></span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/1.json&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 2,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/2.json&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 3,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child2&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/3.json&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我们的目标就是将它修改为树状结构。</p>\n<h3 id=\"修改接口\"><a href=\"#修改接口\" class=\"headerlink\" title=\"修改接口\"></a>修改接口</h3><p>为了修改接口，我们首先需要知道 Rails 是怎么处理我们的请求的。脚手架模板为我们生成了 MVC 中需要的全部组件以及一些路由，让我们使用 <code>rails routes</code> 命令查看路由，这里只列出第一条：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodes GET /nodes(.:format) nodes<span class=\"comment\">#index</span></span><br></pre></td></tr></table></figure>\n\n<p>这条路由就是我们刚刚访问的地址，最后的部分由 <code>Controller#Action</code> 组成，也就是说，我们的目标是 <code>nodes_controller</code> 中的 <code>index</code> 方法。</p>\n<p>打开 <code>app/controllers/nodes_controller.rb</code> 文件，找到 <code>index</code> 方法，将它修改为：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span></span><br><span class=\"line\">  <span class=\"variable\">@nodes</span> = <span class=\"title class_\">Node</span>.where <span class=\"symbol\">parent:</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，接口将只返回根节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ http :3000/nodes.json</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/1.json&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>@nodes</code> 的渲染将委派给 <code>jbuilder</code> ，我们可以在 <code>app/views/nodes/_node.json.jbuilder</code> 文件中找到它的模板，为它添加一个 <code>children</code> 属性：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json.extract! node, <span class=\"symbol\">:id</span>, <span class=\"symbol\">:name</span>, <span class=\"symbol\">:parent_id</span>, <span class=\"symbol\">:created_at</span>, <span class=\"symbol\">:updated_at</span></span><br><span class=\"line\">json.url node_url(node, <span class=\"symbol\">format:</span> <span class=\"symbol\">:json</span>)</span><br><span class=\"line\">json.children <span class=\"keyword\">do</span></span><br><span class=\"line\">  json.array! node.children, <span class=\"symbol\">partial:</span> <span class=\"string\">&#x27;nodes/node&#x27;</span>, <span class=\"symbol\">as:</span> <span class=\"symbol\">:node</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>这段代码使得 <code>node</code> 递归地访问自己的孩子节点，最终渲染出整个树形结构，这样我们就完成了接口的修改。</p>\n<p>最后看一看修改后的接口返回：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ http :3000/nodes.json</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;children&quot;</span>: [],</span><br><span class=\"line\">                <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;id&quot;</span>: 2,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">                <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/2.json&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;children&quot;</span>: [],</span><br><span class=\"line\">                <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;id&quot;</span>: 3,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child2&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">                <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/3.json&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/1.json&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>完成！可以放下工作去享受生活了！</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这并不是一篇正经的教程文章，在 Ruby on Rails 的时代，人们遵从「宁花机器一分，不花程序员一秒」的 UNIX 哲学，希望大家也可以时常放下工作，享受生活。</p>\n<p>最后，如果你对 Ruby on Rails 产生了兴趣，可以去它的官方网站学习。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\"><a href=\"http://www.rubyonrails.org/\">Ruby on Rails</a><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","site":{"data":{}},"length":6441,"excerpt":"<blockquote>\n<p>继上次简单写了一些关于 Event Sourcing 的内容后，感觉进入了一段情绪低迷期，决定学一些和找工作无关的东西。</p>\n<p>实际上，绝大多数项目并不需要使用领域驱动设计，也不需要支持高并发，在这种情况下，为了节省宝贵的时间，我们可以使用一种简单且有效的模式：活动记录 (Active Record)。</p>\n</blockquote>","more":"<h2 id=\"Active-Record-Pattern\"><a href=\"#Active-Record-Pattern\" class=\"headerlink\" title=\"Active Record Pattern\"></a>Active Record Pattern</h2><p>活动记录的特点是 <strong>一个模型类对应关系型数据库的一个表，一个实例对应数据库中的一行记录</strong>。活动记录一般兼有 ORM 的功能，但并不是简单的 ORM，目前 Python 中常用的 ORM，如 SQLAlchemy 和 Django ORM 都实现了 Active Record 的功能。</p>\n<p>关于 Active Record 模式的著名案例是 <em>全栈 Web 开发框架 Ruby on Rails</em><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"[Ruby on Rails](http://www.rubyonrails.org/)\n\">[1]</span></a></sup>，今天我们就用它来实现一个简单的接口，感受一下它的魅力。</p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>我们实现一个不复杂但是很常见的需求：呈现一个树形结构。树的每一个节点 (node) 都拥有一个名字，最后需要提供一个可以展示整个树的 JSON 结构的 Web API。</p>\n<p>它可能长这个样子：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- root <span class=\"keyword\">node</span></span><br><span class=\"line\">    <span class=\"title\">- child</span> <span class=\"keyword\">node</span> <span class=\"title\">1</span></span><br><span class=\"line\">    - child <span class=\"keyword\">node</span> <span class=\"title\">2</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>有很多种在关系型数据库中保存树形结构的方式，但各有优缺点，在这个案例中，我们选择最简单的一种：自关联。</p>\n<p>具体来说，我们为每个节点定义一个 <code>parent_id</code> 字段，该字段保存节点父亲节点的唯一标识。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>首先，我们跳过环境的安装教学，毕竟我并不打算做一个 「手把手教你xxx」 系列。</p>\n<p>简单贴一下 macOS 下使用 Homebrew 安装所需环境的几条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install rbenv</span><br><span class=\"line\">rbenv install 3.1.2</span><br><span class=\"line\">rbenv global 3.1.2</span><br><span class=\"line\">gem install rails</span><br></pre></td></tr></table></figure>\n\n<p>安装好 Rails 之后，使用如下命令创建项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails new demo --api</span><br><span class=\"line\"><span class=\"built_in\">cd</span> demo</span><br></pre></td></tr></table></figure>\n\n<p>结尾的 <code>--api</code> 代表这是一个单纯的 API 项目，Rails 不会加载与前端相关的组件。</p>\n<p>进入项目目录后，打开 <code>Gemfile</code> 文件，找到如下行：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Build JSON APIs with ease [https://github.com/rails/jbuilder]</span></span><br><span class=\"line\"><span class=\"comment\"># gem &quot;jbuilder&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>取消第二行的注释，<code>jbuilder</code> 是一个序列化 JSON 内容的工具，它实现了一个简单好用的 DSL ，可以减少我们的工作。</p>\n<h3 id=\"创建脚手架\"><a href=\"#创建脚手架\" class=\"headerlink\" title=\"创建脚手架\"></a>创建脚手架</h3><p>回顾一下我们需要的模型，对它的描述如下：</p>\n<ul>\n<li>节点 (node) 有自己的名字。</li>\n<li>节点拥有一个父亲节点 (parent)，如果父亲为空，则该节点为根节点。</li>\n<li>节点拥有许多子节点 (children)。</li>\n</ul>\n<p>我们使用 Rails 的生成工具创建一个包含 CRUD 操作的模板：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails generate scaffold node name:string parent:references</span><br></pre></td></tr></table></figure>\n\n<p>命令的前半部分告诉 Rails 我们需要生成一个名叫 <code>node</code> 的脚手架，后半部分指明我们的模型包含两部分内容：<br>一个字符串类型的 <code>name</code> 和一个引用类型 <code>parent</code> 。</p>\n<p>顺利的话，你将会看到以下输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">invoke  active_record</span><br><span class=\"line\">create    db/migrate/20220519154951_create_nodes.rb</span><br><span class=\"line\">create    app/models/node.rb</span><br><span class=\"line\">invoke    test_unit</span><br><span class=\"line\">create      <span class=\"built_in\">test</span>/models/node_test.rb</span><br><span class=\"line\">create      <span class=\"built_in\">test</span>/fixtures/nodes.yml</span><br><span class=\"line\">invoke  resource_route</span><br><span class=\"line\"> route    resources :nodes</span><br><span class=\"line\">invoke  scaffold_controller</span><br><span class=\"line\">create    app/controllers/nodes_controller.rb</span><br><span class=\"line\">invoke    resource_route</span><br><span class=\"line\">invoke    test_unit</span><br><span class=\"line\">create      <span class=\"built_in\">test</span>/controllers/nodes_controller_test.rb</span><br><span class=\"line\">invoke    jbuilder</span><br><span class=\"line\">create      app/views/nodes/index.json.jbuilder</span><br><span class=\"line\">create      app/views/nodes/show.json.jbuilder</span><br><span class=\"line\">create      app/views/nodes/_node.json.jbuilder</span><br></pre></td></tr></table></figure>\n\n<p>Rails 为我们创建了两个 Active Record 类，分别表示数据库迁移和模型，并创建了针对模型的单元测试。</p>\n<p>Rails 还为我们添加了资源 <code>nodes</code> 的路由。</p>\n<p>最后，Rails 为我们生成了 <code>nodes</code> 的 Controller ，对应的单元测试，以及 <code>jbuilder</code> 视图。</p>\n<h3 id=\"修改模型\"><a href=\"#修改模型\" class=\"headerlink\" title=\"修改模型\"></a>修改模型</h3><p>自动生成的脚手架存在一些问题，首先，现在许多项目不允许在数据库中创建外键，虽然我并不能理解这种不分实际情况通通禁止的做法，但我们可以稍作修改，让 Rails 不要创建外键。</p>\n<p>在 <code>db/migrate/</code> 目录下，找到生成的 <code>.rb</code> 文件，将其中的 <code>foreign_key: true</code> 修改为 <code>foreign_key: false</code>，这将会告诉 Rails 在该列建立一个简单的索引而不是外键约束。</p>\n<p>顺便，由于我们的根节点不会有父亲，所以将 <code>null: false</code> 改为 <code>null: true</code> 来允许空值。</p>\n<p>第二个问题是我们使用自关联，但指定了引用 <code>parent</code> ，我们需要告诉 Rails 它是什么。</p>\n<p>打开 <code>app/models/node.rb</code> 文件，修改模型中的关系定义如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &lt; <span class=\"title class_ inherited__\">ApplicationRecord</span></span><br><span class=\"line\">  belongs_to <span class=\"symbol\">:parent</span>, <span class=\"symbol\">class_name:</span> <span class=\"string\">&#x27;Node&#x27;</span>, <span class=\"symbol\">optional:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  has_many <span class=\"symbol\">:children</span>, <span class=\"symbol\">class_name:</span> <span class=\"string\">&#x27;Node&#x27;</span>, <span class=\"symbol\">foreign_key:</span> <span class=\"string\">&#x27;parent_id&#x27;</span>, <span class=\"symbol\">dependent:</span> <span class=\"symbol\">:destroy</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>我们通过 <code>class_name</code> 告诉 Rails <code>parent</code> 使用哪一个模型，并通过 <code>has_many</code> 添加了反向关系，指定使用的字段名为 <code>parent_id</code> 。最后，我们规定在父亲节点被删除时，子节点也会被删除。</p>\n<p>现在，我们可以使用 <code>rails db:migrate</code> 生成数据库。默认的数据库是 SQLite ，使用 Rails 提供的工具进入数据库查看生成的表结构（当然你也可以自己使用 <code>sqlite3</code> 查看，数据库在 <code>db/development.sqlite3</code> 文件中）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails dbconsole</span><br><span class=\"line\">sqlite&gt; .schema nodes</span><br><span class=\"line\">CREATE TABLE IF NOT EXISTS <span class=\"string\">&quot;nodes&quot;</span> (<span class=\"string\">&quot;id&quot;</span> <span class=\"built_in\">integer</span> PRIMARY KEY AUTOINCREMENT NOT NULL, <span class=\"string\">&quot;name&quot;</span> varchar, <span class=\"string\">&quot;parent_id&quot;</span> <span class=\"built_in\">integer</span>, <span class=\"string\">&quot;created_at&quot;</span> datetime(6) NOT NULL, <span class=\"string\">&quot;updated_at&quot;</span> datetime(6) NOT NULL);</span><br><span class=\"line\">CREATE INDEX <span class=\"string\">&quot;index_nodes_on_parent_id&quot;</span> ON <span class=\"string\">&quot;nodes&quot;</span> (<span class=\"string\">&quot;parent_id&quot;</span>);</span><br><span class=\"line\">sqlite&gt; .<span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到， Rails 创建了索引而不是外键约束，并默认添加了 <code>id</code> <code>created_at</code> <code>updated_at</code> 字段。</p>\n<h3 id=\"预设数据\"><a href=\"#预设数据\" class=\"headerlink\" title=\"预设数据\"></a>预设数据</h3><p>为了方便接口测试，我们先生成一些预设数据。</p>\n<p>打开 <code>db/seeds.rb</code> 文件，添加三条记录：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = <span class=\"title class_\">Node</span>.create <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Node</span>.create <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;child1&#x27;</span>, <span class=\"symbol\">parent:</span> root</span><br><span class=\"line\"><span class=\"title class_\">Node</span>.create <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;child2&#x27;</span>, <span class=\"symbol\">parent:</span> root</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 <code>rails db:seed</code> 让它生效，这样我们的数据库中就有了三条记录。</p>\n<h3 id=\"查看接口\"><a href=\"#查看接口\" class=\"headerlink\" title=\"查看接口\"></a>查看接口</h3><p>修改接口之前，我们先来看一看脚手架生成的方法是什么样子的。</p>\n<p>使用 <code>rails server</code> 启动服务，然后访问 <code>http://localhost:3000/nodes.json</code>，你应该会看到刚才添加的三条记录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ http :3000/nodes.json  <span class=\"comment\"># use httpie</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">... <span class=\"comment\"># HTTP HEADERS</span></span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/1.json&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 2,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/2.json&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 3,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child2&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/3.json&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我们的目标就是将它修改为树状结构。</p>\n<h3 id=\"修改接口\"><a href=\"#修改接口\" class=\"headerlink\" title=\"修改接口\"></a>修改接口</h3><p>为了修改接口，我们首先需要知道 Rails 是怎么处理我们的请求的。脚手架模板为我们生成了 MVC 中需要的全部组件以及一些路由，让我们使用 <code>rails routes</code> 命令查看路由，这里只列出第一条：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodes GET /nodes(.:format) nodes<span class=\"comment\">#index</span></span><br></pre></td></tr></table></figure>\n\n<p>这条路由就是我们刚刚访问的地址，最后的部分由 <code>Controller#Action</code> 组成，也就是说，我们的目标是 <code>nodes_controller</code> 中的 <code>index</code> 方法。</p>\n<p>打开 <code>app/controllers/nodes_controller.rb</code> 文件，找到 <code>index</code> 方法，将它修改为：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span></span><br><span class=\"line\">  <span class=\"variable\">@nodes</span> = <span class=\"title class_\">Node</span>.where <span class=\"symbol\">parent:</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，接口将只返回根节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ http :3000/nodes.json</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/1.json&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>@nodes</code> 的渲染将委派给 <code>jbuilder</code> ，我们可以在 <code>app/views/nodes/_node.json.jbuilder</code> 文件中找到它的模板，为它添加一个 <code>children</code> 属性：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json.extract! node, <span class=\"symbol\">:id</span>, <span class=\"symbol\">:name</span>, <span class=\"symbol\">:parent_id</span>, <span class=\"symbol\">:created_at</span>, <span class=\"symbol\">:updated_at</span></span><br><span class=\"line\">json.url node_url(node, <span class=\"symbol\">format:</span> <span class=\"symbol\">:json</span>)</span><br><span class=\"line\">json.children <span class=\"keyword\">do</span></span><br><span class=\"line\">  json.array! node.children, <span class=\"symbol\">partial:</span> <span class=\"string\">&#x27;nodes/node&#x27;</span>, <span class=\"symbol\">as:</span> <span class=\"symbol\">:node</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>这段代码使得 <code>node</code> 递归地访问自己的孩子节点，最终渲染出整个树形结构，这样我们就完成了接口的修改。</p>\n<p>最后看一看修改后的接口返回：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ http :3000/nodes.json</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;children&quot;</span>: [],</span><br><span class=\"line\">                <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;id&quot;</span>: 2,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">                <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.803Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/2.json&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;children&quot;</span>: [],</span><br><span class=\"line\">                <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;id&quot;</span>: 3,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;child2&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;parent_id&quot;</span>: 1,</span><br><span class=\"line\">                <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.804Z&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/3.json&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;id&quot;</span>: 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;parent_id&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2022-05-19T15:18:07.798Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://localhost:3000/nodes/1.json&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>完成！可以放下工作去享受生活了！</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这并不是一篇正经的教程文章，在 Ruby on Rails 的时代，人们遵从「宁花机器一分，不花程序员一秒」的 UNIX 哲学，希望大家也可以时常放下工作，享受生活。</p>\n<p>最后，如果你对 Ruby on Rails 产生了兴趣，可以去它的官方网站学习。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\"><a href=\"http://www.rubyonrails.org/\">Ruby on Rails</a><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>"},{"title":"迟来的 2022 年终总结","date":"2023-01-14T17:12:07.000Z","_content":"\n\n> 2023 年元旦至今已经过了半个月，这个略显无聊的夜晚，我突然想起了自己已经许久没有更新的博客。\n\n<!-- more -->\n\n先说一些与工作无关的事情吧。\n\n上一次发布文章还是 7 月，之后的几个月里，追番成为了我的日常。\n每天回到家中，打开电脑的第一件事就是去蜜柑看一看有没有订阅的番剧更新，追完了夏季和秋季两个季度的动画，有《孤独摇滚》这样给了我许多欢笑和感动的作品，也有《恋爱FLOPS》这样故事发展毫不意外又充满惊喜的作品，2023 年冬季，我也会继续追番的。\n\n除了动画外，我的另一项主要娱乐方式 —— 视觉小说，进展则不是很顺利。\n之前就在游玩的《樱花萌放》由于作者的“啰嗦”，至今仍然没有开启最后一条线路，也尝试开坑了很多新作或者 FD 作品，比如《苍之彼方的四重奏 EXTRA 1》，然而几乎都没有玩多久便不再打开了。\n哪怕是短篇的《星之终途》也被我一拖再拖。\n唯一一部从头读到尾的作品是 12 月在 NS 上发售的《魔法使之夜》重制版，有珠的主题曲成为了我那个月循环最多的音乐，它总能将我的意识带到山上的洋馆中，使我的精神得到放松。\n\n游戏方面，除了《魔法使之夜》外，我通关了迟了 3 个月才拿到的《异度神剑 3》，花了 170 多小时探索那个对我来说广阔又陌生的世界，另外每过几天就会和朋友相约在《Splatoon 3》里一起给熊老板打工。\n\n还有手游的部分，我自己也总是吐槽“给手游氪金实在是没什么收益，感觉掉入了陷阱”，然而消费带来的快乐确实让人难以拒绝，只好一边骂自己一边给游戏公司送钱了。\n与以往不同的地方是我还在玩的手机游戏中已经没有在大陆运营的了，大概是一次次的和谐让我失望了吧，另一方面，afk 类型的游戏取代了其他类型成为了我的新选择，这类游戏通常每天只需要花费不到 10 分钟的时间，偶尔也会让我思考“玩它们的意义到底是什么？”。\n我还知道了“韩游剧情通常比较黑暗，喜欢发刀”的说法，然而《蔚蓝档案》似乎并不是这样，新的一年，也要做个好老师！\n\n年底的时候，到处都在传各种各样的“年度总结”，有 Bilibili 的，网易云音乐的，然而我已经基本不在 Bilibili 观看动画，也不再在网易云听歌了。\n\n说到 2022 不得不提的一件事，应该是中国大陆终于决定放开对新冠疫情的管制吧。\n我见到许多疫情期间从不戴口罩的人在“二十条”公布后即使在室外通风处依然戴着口罩，见到他们严防死守最终还是发了高烧，见到他们在 SNS 上说自己“疼得想死”，“说不出话”，见到他们把止痛药、退烧药、检测盒一扫而空……\n\n从头到尾，我觉得自己好像一个局外人，在天空中 —— 或是更遥远的什么地方，只是看着，就好像这些事情与我无关。\n我也想过如果自己被感染了会怎么样，却始终想不出个结果。\n再次回想起来，只觉得空洞，好像全身的力气被抽走一样。\n\n写下这些字的前几天，我对自己的精神状态有了更进一步的理解，确认了自己依然是一个乐观、积极的人，我想这对我来说是一件好事。\n\n再说说和开发的工作有关的事情吧。\n\n应该是几个月前，碰到了一家很有趣的公司，他们的面试没有八股文和算法题，只是对着简历中写的项目经历和我聊天。\n连续几场面试，我们聊了一些不容易注意到的语法细节，聊了系统设计，聊了抽象和过度抽象如何界定……\n对方甚至点开了我写在简历上的博客地址，和我讨论了我写的文章，这是我把博客地址写在简历上后第一次明确有“被人看见”的经历。\n\n我那时并没有刻意去准备面试，如果对方像字节那样考我一些八股或算法题，我其实没有信心能答上来，但关于软件设计的话题恰恰是我过去一年都在努力钻研的内容，所以聊得很开心。\n\n虽然他们最终没有再给我回复，但我认为这是一件值得记下来的事。\n\n前不久，因为需要在 vscode 中使用 markdown 编辑一个包含中文的表格，我把编辑器的字体换成了中文等宽，并首次得知 Noto Sans 是 Google 发表的字体。\n中文的等宽字体其实算不上好看，但对于需要使用 markdown 编辑表格的人来说却非常有用，毕竟只有这种字体可以让表格对齐。\n\n最近在公司开发的项目都使用 Go 语言，我好像也逐渐习惯了静态类型系统。\n如果之前和人说我有一年以上的 Go 语言开发经验是有吹的成分，那么现在这句话已经变成事实了吧。\n\n探索 DDD 的过程中，我试着用存储库分离了领域模型和 ORM 模型，然而在写《数据映射器》那篇文章的时候，我对于这种抽象的意义认知其实还不清晰，让我的理解更进一步的是《架构整洁之道》，里面提到“系统各部分之间的依赖关系不能构成环”，而打破循环依赖的手段就是 DIP ，依赖反转，这句话成为了一块很大的拼图，填补了我对 DDD 中分层架构的理解。\n\n将存储库留在领域层，而将具体实现放置在基础设施中，持久化方式的变更并不会影响到系统中的业务逻辑，实际编写代码时，可以使用依赖注入的技巧来处理复杂的依赖关系。\n\n在一次和做 Java 开发的朋友的聊天中，我们谈到 Spring 依赖注入的注解，我突然意识到 DI 其实是一件能够自动化的事情，几经波折后找到了 Google 开发的 wire ，极大提升了我的开发体验。\n\nRepository 和 DI 工具使我能够轻松应对许多项目，但仍有一些场景让我感觉束手束脚，具体来说是需要在模型方法中和存储库交互的情况，毕竟我不能把存储库“注入”到模型中去。\n\n大概在 12 月的某一天，我开始尝试挑战 Registry 模式，将原本被分散注入到各个 Repository 和 Service 中的模块统统放进一个叫做 Registry 的对象中，让它作为一个单例存在。\n我发现不但之前的功能都可以实现，我还能够在领域模型这样无法注入实例的地方调用我想要的存储库和服务。这一进展让我可以把更多和模型相关的操作放在模型的方法而不是一个单独的服务中实现，同时让我可以灵活的使用懒加载来避免不需要的远程调用，我也开始在存储库的实现中适当加入缓存来提升性能，当然这一切对于存储库的使用者来说都是不可见也不需要关心的，我想这是一个很能体现出“抽象”的魅力的地方。\n\n关于 Registry 和 DI 这些话题，其实都可以单独拿出来写一下相关的文章，不过这些东西就放在之后吧（拖延症）。\n\n虽然被人吐槽说我的 Go 代码“写得像 Java”，但我想这并不是什么坏事，因为我已经在几次迭代中切实感受到了这样做的好处，而 Java 体系本身就是一个非常成熟的企业级应用开发体系，值得我学习。\n\n我确实也做了一些反思：相较于 Java 来说，Go 语言开发有什么自己的特点吗？\n\n我的答案是函数，新出现的语言都很重视函数，Go 语言没有静态方法和构造方法，因为函数完全可以胜任这部分工作。\n设计模式中的工厂方法在这些新语言中也没有存在的必要，因为一个用于创建对象的函数可以做到相同的事。\n\n另一个不同于 Java 的地方是函数式编程，严格来说是允许将函数作为参数传递，这使得语言的灵活性被极大增强了，但我在使用这些特性时比较克制，因为我发现乱用新特性很容易导致代码无法测试，而我在评价代码好坏时的原则之一是“无法测试的代码一定不是好代码”。\n\n说到测试，公司内并没有要求开发人员编写测试，测试部门的同事也不会使用自动化测试，这实在是一件遗憾的事，践行 TDD 一年多的时间了，如今我可以说测试用例就是我对自己代码信心的来源，如果不是这些用例支撑着我，恐怕我早就和其他人一样陷入无尽的 bug 修复工作中不能自拔了，更别提花时间去提升自己了。\n\n希望 2023 年的自己可以过得更加自由，更让自己满意吧。\n\n顺便一提写这篇文章的时候我使用的背景音乐是 [A 叔的 200 万粉丝特别企划](https://www.bilibili.com/video/BV1BW4y1L7oL/) ，希望读到这里的你不要错过。\n","source":"_posts/diary-2023-01-14.md","raw":"---\ntitle: 迟来的 2022 年终总结\ncategory: diary\ndate: 2023-01-15 01:12:07\ntags:\n---\n\n\n> 2023 年元旦至今已经过了半个月，这个略显无聊的夜晚，我突然想起了自己已经许久没有更新的博客。\n\n<!-- more -->\n\n先说一些与工作无关的事情吧。\n\n上一次发布文章还是 7 月，之后的几个月里，追番成为了我的日常。\n每天回到家中，打开电脑的第一件事就是去蜜柑看一看有没有订阅的番剧更新，追完了夏季和秋季两个季度的动画，有《孤独摇滚》这样给了我许多欢笑和感动的作品，也有《恋爱FLOPS》这样故事发展毫不意外又充满惊喜的作品，2023 年冬季，我也会继续追番的。\n\n除了动画外，我的另一项主要娱乐方式 —— 视觉小说，进展则不是很顺利。\n之前就在游玩的《樱花萌放》由于作者的“啰嗦”，至今仍然没有开启最后一条线路，也尝试开坑了很多新作或者 FD 作品，比如《苍之彼方的四重奏 EXTRA 1》，然而几乎都没有玩多久便不再打开了。\n哪怕是短篇的《星之终途》也被我一拖再拖。\n唯一一部从头读到尾的作品是 12 月在 NS 上发售的《魔法使之夜》重制版，有珠的主题曲成为了我那个月循环最多的音乐，它总能将我的意识带到山上的洋馆中，使我的精神得到放松。\n\n游戏方面，除了《魔法使之夜》外，我通关了迟了 3 个月才拿到的《异度神剑 3》，花了 170 多小时探索那个对我来说广阔又陌生的世界，另外每过几天就会和朋友相约在《Splatoon 3》里一起给熊老板打工。\n\n还有手游的部分，我自己也总是吐槽“给手游氪金实在是没什么收益，感觉掉入了陷阱”，然而消费带来的快乐确实让人难以拒绝，只好一边骂自己一边给游戏公司送钱了。\n与以往不同的地方是我还在玩的手机游戏中已经没有在大陆运营的了，大概是一次次的和谐让我失望了吧，另一方面，afk 类型的游戏取代了其他类型成为了我的新选择，这类游戏通常每天只需要花费不到 10 分钟的时间，偶尔也会让我思考“玩它们的意义到底是什么？”。\n我还知道了“韩游剧情通常比较黑暗，喜欢发刀”的说法，然而《蔚蓝档案》似乎并不是这样，新的一年，也要做个好老师！\n\n年底的时候，到处都在传各种各样的“年度总结”，有 Bilibili 的，网易云音乐的，然而我已经基本不在 Bilibili 观看动画，也不再在网易云听歌了。\n\n说到 2022 不得不提的一件事，应该是中国大陆终于决定放开对新冠疫情的管制吧。\n我见到许多疫情期间从不戴口罩的人在“二十条”公布后即使在室外通风处依然戴着口罩，见到他们严防死守最终还是发了高烧，见到他们在 SNS 上说自己“疼得想死”，“说不出话”，见到他们把止痛药、退烧药、检测盒一扫而空……\n\n从头到尾，我觉得自己好像一个局外人，在天空中 —— 或是更遥远的什么地方，只是看着，就好像这些事情与我无关。\n我也想过如果自己被感染了会怎么样，却始终想不出个结果。\n再次回想起来，只觉得空洞，好像全身的力气被抽走一样。\n\n写下这些字的前几天，我对自己的精神状态有了更进一步的理解，确认了自己依然是一个乐观、积极的人，我想这对我来说是一件好事。\n\n再说说和开发的工作有关的事情吧。\n\n应该是几个月前，碰到了一家很有趣的公司，他们的面试没有八股文和算法题，只是对着简历中写的项目经历和我聊天。\n连续几场面试，我们聊了一些不容易注意到的语法细节，聊了系统设计，聊了抽象和过度抽象如何界定……\n对方甚至点开了我写在简历上的博客地址，和我讨论了我写的文章，这是我把博客地址写在简历上后第一次明确有“被人看见”的经历。\n\n我那时并没有刻意去准备面试，如果对方像字节那样考我一些八股或算法题，我其实没有信心能答上来，但关于软件设计的话题恰恰是我过去一年都在努力钻研的内容，所以聊得很开心。\n\n虽然他们最终没有再给我回复，但我认为这是一件值得记下来的事。\n\n前不久，因为需要在 vscode 中使用 markdown 编辑一个包含中文的表格，我把编辑器的字体换成了中文等宽，并首次得知 Noto Sans 是 Google 发表的字体。\n中文的等宽字体其实算不上好看，但对于需要使用 markdown 编辑表格的人来说却非常有用，毕竟只有这种字体可以让表格对齐。\n\n最近在公司开发的项目都使用 Go 语言，我好像也逐渐习惯了静态类型系统。\n如果之前和人说我有一年以上的 Go 语言开发经验是有吹的成分，那么现在这句话已经变成事实了吧。\n\n探索 DDD 的过程中，我试着用存储库分离了领域模型和 ORM 模型，然而在写《数据映射器》那篇文章的时候，我对于这种抽象的意义认知其实还不清晰，让我的理解更进一步的是《架构整洁之道》，里面提到“系统各部分之间的依赖关系不能构成环”，而打破循环依赖的手段就是 DIP ，依赖反转，这句话成为了一块很大的拼图，填补了我对 DDD 中分层架构的理解。\n\n将存储库留在领域层，而将具体实现放置在基础设施中，持久化方式的变更并不会影响到系统中的业务逻辑，实际编写代码时，可以使用依赖注入的技巧来处理复杂的依赖关系。\n\n在一次和做 Java 开发的朋友的聊天中，我们谈到 Spring 依赖注入的注解，我突然意识到 DI 其实是一件能够自动化的事情，几经波折后找到了 Google 开发的 wire ，极大提升了我的开发体验。\n\nRepository 和 DI 工具使我能够轻松应对许多项目，但仍有一些场景让我感觉束手束脚，具体来说是需要在模型方法中和存储库交互的情况，毕竟我不能把存储库“注入”到模型中去。\n\n大概在 12 月的某一天，我开始尝试挑战 Registry 模式，将原本被分散注入到各个 Repository 和 Service 中的模块统统放进一个叫做 Registry 的对象中，让它作为一个单例存在。\n我发现不但之前的功能都可以实现，我还能够在领域模型这样无法注入实例的地方调用我想要的存储库和服务。这一进展让我可以把更多和模型相关的操作放在模型的方法而不是一个单独的服务中实现，同时让我可以灵活的使用懒加载来避免不需要的远程调用，我也开始在存储库的实现中适当加入缓存来提升性能，当然这一切对于存储库的使用者来说都是不可见也不需要关心的，我想这是一个很能体现出“抽象”的魅力的地方。\n\n关于 Registry 和 DI 这些话题，其实都可以单独拿出来写一下相关的文章，不过这些东西就放在之后吧（拖延症）。\n\n虽然被人吐槽说我的 Go 代码“写得像 Java”，但我想这并不是什么坏事，因为我已经在几次迭代中切实感受到了这样做的好处，而 Java 体系本身就是一个非常成熟的企业级应用开发体系，值得我学习。\n\n我确实也做了一些反思：相较于 Java 来说，Go 语言开发有什么自己的特点吗？\n\n我的答案是函数，新出现的语言都很重视函数，Go 语言没有静态方法和构造方法，因为函数完全可以胜任这部分工作。\n设计模式中的工厂方法在这些新语言中也没有存在的必要，因为一个用于创建对象的函数可以做到相同的事。\n\n另一个不同于 Java 的地方是函数式编程，严格来说是允许将函数作为参数传递，这使得语言的灵活性被极大增强了，但我在使用这些特性时比较克制，因为我发现乱用新特性很容易导致代码无法测试，而我在评价代码好坏时的原则之一是“无法测试的代码一定不是好代码”。\n\n说到测试，公司内并没有要求开发人员编写测试，测试部门的同事也不会使用自动化测试，这实在是一件遗憾的事，践行 TDD 一年多的时间了，如今我可以说测试用例就是我对自己代码信心的来源，如果不是这些用例支撑着我，恐怕我早就和其他人一样陷入无尽的 bug 修复工作中不能自拔了，更别提花时间去提升自己了。\n\n希望 2023 年的自己可以过得更加自由，更让自己满意吧。\n\n顺便一提写这篇文章的时候我使用的背景音乐是 [A 叔的 200 万粉丝特别企划](https://www.bilibili.com/video/BV1BW4y1L7oL/) ，希望读到这里的你不要错过。\n","slug":"diary-2023-01-14","published":1,"updated":"2023-02-27T16:20:43.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clen23zgc0009wfm0c5j6euth","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>2023 年元旦至今已经过了半个月，这个略显无聊的夜晚，我突然想起了自己已经许久没有更新的博客。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>先说一些与工作无关的事情吧。</p>\n<p>上一次发布文章还是 7 月，之后的几个月里，追番成为了我的日常。<br>每天回到家中，打开电脑的第一件事就是去蜜柑看一看有没有订阅的番剧更新，追完了夏季和秋季两个季度的动画，有《孤独摇滚》这样给了我许多欢笑和感动的作品，也有《恋爱FLOPS》这样故事发展毫不意外又充满惊喜的作品，2023 年冬季，我也会继续追番的。</p>\n<p>除了动画外，我的另一项主要娱乐方式 —— 视觉小说，进展则不是很顺利。<br>之前就在游玩的《樱花萌放》由于作者的“啰嗦”，至今仍然没有开启最后一条线路，也尝试开坑了很多新作或者 FD 作品，比如《苍之彼方的四重奏 EXTRA 1》，然而几乎都没有玩多久便不再打开了。<br>哪怕是短篇的《星之终途》也被我一拖再拖。<br>唯一一部从头读到尾的作品是 12 月在 NS 上发售的《魔法使之夜》重制版，有珠的主题曲成为了我那个月循环最多的音乐，它总能将我的意识带到山上的洋馆中，使我的精神得到放松。</p>\n<p>游戏方面，除了《魔法使之夜》外，我通关了迟了 3 个月才拿到的《异度神剑 3》，花了 170 多小时探索那个对我来说广阔又陌生的世界，另外每过几天就会和朋友相约在《Splatoon 3》里一起给熊老板打工。</p>\n<p>还有手游的部分，我自己也总是吐槽“给手游氪金实在是没什么收益，感觉掉入了陷阱”，然而消费带来的快乐确实让人难以拒绝，只好一边骂自己一边给游戏公司送钱了。<br>与以往不同的地方是我还在玩的手机游戏中已经没有在大陆运营的了，大概是一次次的和谐让我失望了吧，另一方面，afk 类型的游戏取代了其他类型成为了我的新选择，这类游戏通常每天只需要花费不到 10 分钟的时间，偶尔也会让我思考“玩它们的意义到底是什么？”。<br>我还知道了“韩游剧情通常比较黑暗，喜欢发刀”的说法，然而《蔚蓝档案》似乎并不是这样，新的一年，也要做个好老师！</p>\n<p>年底的时候，到处都在传各种各样的“年度总结”，有 Bilibili 的，网易云音乐的，然而我已经基本不在 Bilibili 观看动画，也不再在网易云听歌了。</p>\n<p>说到 2022 不得不提的一件事，应该是中国大陆终于决定放开对新冠疫情的管制吧。<br>我见到许多疫情期间从不戴口罩的人在“二十条”公布后即使在室外通风处依然戴着口罩，见到他们严防死守最终还是发了高烧，见到他们在 SNS 上说自己“疼得想死”，“说不出话”，见到他们把止痛药、退烧药、检测盒一扫而空……</p>\n<p>从头到尾，我觉得自己好像一个局外人，在天空中 —— 或是更遥远的什么地方，只是看着，就好像这些事情与我无关。<br>我也想过如果自己被感染了会怎么样，却始终想不出个结果。<br>再次回想起来，只觉得空洞，好像全身的力气被抽走一样。</p>\n<p>写下这些字的前几天，我对自己的精神状态有了更进一步的理解，确认了自己依然是一个乐观、积极的人，我想这对我来说是一件好事。</p>\n<p>再说说和开发的工作有关的事情吧。</p>\n<p>应该是几个月前，碰到了一家很有趣的公司，他们的面试没有八股文和算法题，只是对着简历中写的项目经历和我聊天。<br>连续几场面试，我们聊了一些不容易注意到的语法细节，聊了系统设计，聊了抽象和过度抽象如何界定……<br>对方甚至点开了我写在简历上的博客地址，和我讨论了我写的文章，这是我把博客地址写在简历上后第一次明确有“被人看见”的经历。</p>\n<p>我那时并没有刻意去准备面试，如果对方像字节那样考我一些八股或算法题，我其实没有信心能答上来，但关于软件设计的话题恰恰是我过去一年都在努力钻研的内容，所以聊得很开心。</p>\n<p>虽然他们最终没有再给我回复，但我认为这是一件值得记下来的事。</p>\n<p>前不久，因为需要在 vscode 中使用 markdown 编辑一个包含中文的表格，我把编辑器的字体换成了中文等宽，并首次得知 Noto Sans 是 Google 发表的字体。<br>中文的等宽字体其实算不上好看，但对于需要使用 markdown 编辑表格的人来说却非常有用，毕竟只有这种字体可以让表格对齐。</p>\n<p>最近在公司开发的项目都使用 Go 语言，我好像也逐渐习惯了静态类型系统。<br>如果之前和人说我有一年以上的 Go 语言开发经验是有吹的成分，那么现在这句话已经变成事实了吧。</p>\n<p>探索 DDD 的过程中，我试着用存储库分离了领域模型和 ORM 模型，然而在写《数据映射器》那篇文章的时候，我对于这种抽象的意义认知其实还不清晰，让我的理解更进一步的是《架构整洁之道》，里面提到“系统各部分之间的依赖关系不能构成环”，而打破循环依赖的手段就是 DIP ，依赖反转，这句话成为了一块很大的拼图，填补了我对 DDD 中分层架构的理解。</p>\n<p>将存储库留在领域层，而将具体实现放置在基础设施中，持久化方式的变更并不会影响到系统中的业务逻辑，实际编写代码时，可以使用依赖注入的技巧来处理复杂的依赖关系。</p>\n<p>在一次和做 Java 开发的朋友的聊天中，我们谈到 Spring 依赖注入的注解，我突然意识到 DI 其实是一件能够自动化的事情，几经波折后找到了 Google 开发的 wire ，极大提升了我的开发体验。</p>\n<p>Repository 和 DI 工具使我能够轻松应对许多项目，但仍有一些场景让我感觉束手束脚，具体来说是需要在模型方法中和存储库交互的情况，毕竟我不能把存储库“注入”到模型中去。</p>\n<p>大概在 12 月的某一天，我开始尝试挑战 Registry 模式，将原本被分散注入到各个 Repository 和 Service 中的模块统统放进一个叫做 Registry 的对象中，让它作为一个单例存在。<br>我发现不但之前的功能都可以实现，我还能够在领域模型这样无法注入实例的地方调用我想要的存储库和服务。这一进展让我可以把更多和模型相关的操作放在模型的方法而不是一个单独的服务中实现，同时让我可以灵活的使用懒加载来避免不需要的远程调用，我也开始在存储库的实现中适当加入缓存来提升性能，当然这一切对于存储库的使用者来说都是不可见也不需要关心的，我想这是一个很能体现出“抽象”的魅力的地方。</p>\n<p>关于 Registry 和 DI 这些话题，其实都可以单独拿出来写一下相关的文章，不过这些东西就放在之后吧（拖延症）。</p>\n<p>虽然被人吐槽说我的 Go 代码“写得像 Java”，但我想这并不是什么坏事，因为我已经在几次迭代中切实感受到了这样做的好处，而 Java 体系本身就是一个非常成熟的企业级应用开发体系，值得我学习。</p>\n<p>我确实也做了一些反思：相较于 Java 来说，Go 语言开发有什么自己的特点吗？</p>\n<p>我的答案是函数，新出现的语言都很重视函数，Go 语言没有静态方法和构造方法，因为函数完全可以胜任这部分工作。<br>设计模式中的工厂方法在这些新语言中也没有存在的必要，因为一个用于创建对象的函数可以做到相同的事。</p>\n<p>另一个不同于 Java 的地方是函数式编程，严格来说是允许将函数作为参数传递，这使得语言的灵活性被极大增强了，但我在使用这些特性时比较克制，因为我发现乱用新特性很容易导致代码无法测试，而我在评价代码好坏时的原则之一是“无法测试的代码一定不是好代码”。</p>\n<p>说到测试，公司内并没有要求开发人员编写测试，测试部门的同事也不会使用自动化测试，这实在是一件遗憾的事，践行 TDD 一年多的时间了，如今我可以说测试用例就是我对自己代码信心的来源，如果不是这些用例支撑着我，恐怕我早就和其他人一样陷入无尽的 bug 修复工作中不能自拔了，更别提花时间去提升自己了。</p>\n<p>希望 2023 年的自己可以过得更加自由，更让自己满意吧。</p>\n<p>顺便一提写这篇文章的时候我使用的背景音乐是 <a href=\"https://www.bilibili.com/video/BV1BW4y1L7oL/\">A 叔的 200 万粉丝特别企划</a> ，希望读到这里的你不要错过。</p>\n","site":{"data":{}},"length":3011,"excerpt":"<blockquote>\n<p>2023 年元旦至今已经过了半个月，这个略显无聊的夜晚，我突然想起了自己已经许久没有更新的博客。</p>\n</blockquote>","more":"<p>先说一些与工作无关的事情吧。</p>\n<p>上一次发布文章还是 7 月，之后的几个月里，追番成为了我的日常。<br>每天回到家中，打开电脑的第一件事就是去蜜柑看一看有没有订阅的番剧更新，追完了夏季和秋季两个季度的动画，有《孤独摇滚》这样给了我许多欢笑和感动的作品，也有《恋爱FLOPS》这样故事发展毫不意外又充满惊喜的作品，2023 年冬季，我也会继续追番的。</p>\n<p>除了动画外，我的另一项主要娱乐方式 —— 视觉小说，进展则不是很顺利。<br>之前就在游玩的《樱花萌放》由于作者的“啰嗦”，至今仍然没有开启最后一条线路，也尝试开坑了很多新作或者 FD 作品，比如《苍之彼方的四重奏 EXTRA 1》，然而几乎都没有玩多久便不再打开了。<br>哪怕是短篇的《星之终途》也被我一拖再拖。<br>唯一一部从头读到尾的作品是 12 月在 NS 上发售的《魔法使之夜》重制版，有珠的主题曲成为了我那个月循环最多的音乐，它总能将我的意识带到山上的洋馆中，使我的精神得到放松。</p>\n<p>游戏方面，除了《魔法使之夜》外，我通关了迟了 3 个月才拿到的《异度神剑 3》，花了 170 多小时探索那个对我来说广阔又陌生的世界，另外每过几天就会和朋友相约在《Splatoon 3》里一起给熊老板打工。</p>\n<p>还有手游的部分，我自己也总是吐槽“给手游氪金实在是没什么收益，感觉掉入了陷阱”，然而消费带来的快乐确实让人难以拒绝，只好一边骂自己一边给游戏公司送钱了。<br>与以往不同的地方是我还在玩的手机游戏中已经没有在大陆运营的了，大概是一次次的和谐让我失望了吧，另一方面，afk 类型的游戏取代了其他类型成为了我的新选择，这类游戏通常每天只需要花费不到 10 分钟的时间，偶尔也会让我思考“玩它们的意义到底是什么？”。<br>我还知道了“韩游剧情通常比较黑暗，喜欢发刀”的说法，然而《蔚蓝档案》似乎并不是这样，新的一年，也要做个好老师！</p>\n<p>年底的时候，到处都在传各种各样的“年度总结”，有 Bilibili 的，网易云音乐的，然而我已经基本不在 Bilibili 观看动画，也不再在网易云听歌了。</p>\n<p>说到 2022 不得不提的一件事，应该是中国大陆终于决定放开对新冠疫情的管制吧。<br>我见到许多疫情期间从不戴口罩的人在“二十条”公布后即使在室外通风处依然戴着口罩，见到他们严防死守最终还是发了高烧，见到他们在 SNS 上说自己“疼得想死”，“说不出话”，见到他们把止痛药、退烧药、检测盒一扫而空……</p>\n<p>从头到尾，我觉得自己好像一个局外人，在天空中 —— 或是更遥远的什么地方，只是看着，就好像这些事情与我无关。<br>我也想过如果自己被感染了会怎么样，却始终想不出个结果。<br>再次回想起来，只觉得空洞，好像全身的力气被抽走一样。</p>\n<p>写下这些字的前几天，我对自己的精神状态有了更进一步的理解，确认了自己依然是一个乐观、积极的人，我想这对我来说是一件好事。</p>\n<p>再说说和开发的工作有关的事情吧。</p>\n<p>应该是几个月前，碰到了一家很有趣的公司，他们的面试没有八股文和算法题，只是对着简历中写的项目经历和我聊天。<br>连续几场面试，我们聊了一些不容易注意到的语法细节，聊了系统设计，聊了抽象和过度抽象如何界定……<br>对方甚至点开了我写在简历上的博客地址，和我讨论了我写的文章，这是我把博客地址写在简历上后第一次明确有“被人看见”的经历。</p>\n<p>我那时并没有刻意去准备面试，如果对方像字节那样考我一些八股或算法题，我其实没有信心能答上来，但关于软件设计的话题恰恰是我过去一年都在努力钻研的内容，所以聊得很开心。</p>\n<p>虽然他们最终没有再给我回复，但我认为这是一件值得记下来的事。</p>\n<p>前不久，因为需要在 vscode 中使用 markdown 编辑一个包含中文的表格，我把编辑器的字体换成了中文等宽，并首次得知 Noto Sans 是 Google 发表的字体。<br>中文的等宽字体其实算不上好看，但对于需要使用 markdown 编辑表格的人来说却非常有用，毕竟只有这种字体可以让表格对齐。</p>\n<p>最近在公司开发的项目都使用 Go 语言，我好像也逐渐习惯了静态类型系统。<br>如果之前和人说我有一年以上的 Go 语言开发经验是有吹的成分，那么现在这句话已经变成事实了吧。</p>\n<p>探索 DDD 的过程中，我试着用存储库分离了领域模型和 ORM 模型，然而在写《数据映射器》那篇文章的时候，我对于这种抽象的意义认知其实还不清晰，让我的理解更进一步的是《架构整洁之道》，里面提到“系统各部分之间的依赖关系不能构成环”，而打破循环依赖的手段就是 DIP ，依赖反转，这句话成为了一块很大的拼图，填补了我对 DDD 中分层架构的理解。</p>\n<p>将存储库留在领域层，而将具体实现放置在基础设施中，持久化方式的变更并不会影响到系统中的业务逻辑，实际编写代码时，可以使用依赖注入的技巧来处理复杂的依赖关系。</p>\n<p>在一次和做 Java 开发的朋友的聊天中，我们谈到 Spring 依赖注入的注解，我突然意识到 DI 其实是一件能够自动化的事情，几经波折后找到了 Google 开发的 wire ，极大提升了我的开发体验。</p>\n<p>Repository 和 DI 工具使我能够轻松应对许多项目，但仍有一些场景让我感觉束手束脚，具体来说是需要在模型方法中和存储库交互的情况，毕竟我不能把存储库“注入”到模型中去。</p>\n<p>大概在 12 月的某一天，我开始尝试挑战 Registry 模式，将原本被分散注入到各个 Repository 和 Service 中的模块统统放进一个叫做 Registry 的对象中，让它作为一个单例存在。<br>我发现不但之前的功能都可以实现，我还能够在领域模型这样无法注入实例的地方调用我想要的存储库和服务。这一进展让我可以把更多和模型相关的操作放在模型的方法而不是一个单独的服务中实现，同时让我可以灵活的使用懒加载来避免不需要的远程调用，我也开始在存储库的实现中适当加入缓存来提升性能，当然这一切对于存储库的使用者来说都是不可见也不需要关心的，我想这是一个很能体现出“抽象”的魅力的地方。</p>\n<p>关于 Registry 和 DI 这些话题，其实都可以单独拿出来写一下相关的文章，不过这些东西就放在之后吧（拖延症）。</p>\n<p>虽然被人吐槽说我的 Go 代码“写得像 Java”，但我想这并不是什么坏事，因为我已经在几次迭代中切实感受到了这样做的好处，而 Java 体系本身就是一个非常成熟的企业级应用开发体系，值得我学习。</p>\n<p>我确实也做了一些反思：相较于 Java 来说，Go 语言开发有什么自己的特点吗？</p>\n<p>我的答案是函数，新出现的语言都很重视函数，Go 语言没有静态方法和构造方法，因为函数完全可以胜任这部分工作。<br>设计模式中的工厂方法在这些新语言中也没有存在的必要，因为一个用于创建对象的函数可以做到相同的事。</p>\n<p>另一个不同于 Java 的地方是函数式编程，严格来说是允许将函数作为参数传递，这使得语言的灵活性被极大增强了，但我在使用这些特性时比较克制，因为我发现乱用新特性很容易导致代码无法测试，而我在评价代码好坏时的原则之一是“无法测试的代码一定不是好代码”。</p>\n<p>说到测试，公司内并没有要求开发人员编写测试，测试部门的同事也不会使用自动化测试，这实在是一件遗憾的事，践行 TDD 一年多的时间了，如今我可以说测试用例就是我对自己代码信心的来源，如果不是这些用例支撑着我，恐怕我早就和其他人一样陷入无尽的 bug 修复工作中不能自拔了，更别提花时间去提升自己了。</p>\n<p>希望 2023 年的自己可以过得更加自由，更让自己满意吧。</p>\n<p>顺便一提写这篇文章的时候我使用的背景音乐是 <a href=\"https://www.bilibili.com/video/BV1BW4y1L7oL/\">A 叔的 200 万粉丝特别企划</a> ，希望读到这里的你不要错过。</p>"}],"PostAsset":[{"_id":"source/_posts/create-alfred-encode-workflow/encode.png","post":"clen23zg80003wfm0c85l2ur2","slug":"encode.png","modified":1,"renderable":1},{"_id":"source/_posts/create-alfred-encode-workflow/workflow.png","post":"clen23zg80003wfm0c85l2ur2","slug":"workflow.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clen23zgb0008wfm0aocwcz7f","category_id":"clen23zg90004wfm08blxglz9","_id":"clen23zgc000cwfm0ewla3b55"},{"post_id":"clen23zg50001wfm00dek5vm8","category_id":"clen23zg90004wfm08blxglz9","_id":"clen23zgd000fwfm062nwf8vo"},{"post_id":"clen23zg80003wfm0c85l2ur2","category_id":"clen23zgc000awfm0eyyr2iri","_id":"clen23zge000hwfm004at9t13"},{"post_id":"clen23zga0007wfm0bl0f3cfh","category_id":"clen23zg90004wfm08blxglz9","_id":"clen23zge000jwfm09es6ca8s"},{"post_id":"clen23zgc0009wfm0c5j6euth","category_id":"clen23zgd000gwfm0612w1xzz","_id":"clen23zge000mwfm01ylxeng7"}],"PostTag":[{"post_id":"clen23zg50001wfm00dek5vm8","tag_id":"clen23zga0005wfm0gxf50203","_id":"clen23zge000lwfm041g80mov"},{"post_id":"clen23zg50001wfm00dek5vm8","tag_id":"clen23zgc000bwfm0eafse2bg","_id":"clen23zge000nwfm02c52aj3j"},{"post_id":"clen23zg50001wfm00dek5vm8","tag_id":"clen23zgd000ewfm09mrvea18","_id":"clen23zge000pwfm08lcg8dy3"},{"post_id":"clen23zg50001wfm00dek5vm8","tag_id":"clen23zge000iwfm0hwxog83w","_id":"clen23zge000qwfm099bd12y4"},{"post_id":"clen23zg80003wfm0c85l2ur2","tag_id":"clen23zge000kwfm00ltmd9ql","_id":"clen23zgf000uwfm0cgx1al7c"},{"post_id":"clen23zg80003wfm0c85l2ur2","tag_id":"clen23zge000owfm0d66v0tgq","_id":"clen23zgf000vwfm05y03bhpg"},{"post_id":"clen23zg80003wfm0c85l2ur2","tag_id":"clen23zge000rwfm07l1f1gym","_id":"clen23zgf000xwfm063mw2cim"},{"post_id":"clen23zg80003wfm0c85l2ur2","tag_id":"clen23zge000swfm0aa12ghy6","_id":"clen23zgf000ywfm05ied0kdy"},{"post_id":"clen23zga0007wfm0bl0f3cfh","tag_id":"clen23zge000twfm0c5dmh7oq","_id":"clen23zgf0010wfm0aprv1zhx"},{"post_id":"clen23zgb0008wfm0aocwcz7f","tag_id":"clen23zge000swfm0aa12ghy6","_id":"clen23zgf0012wfm0exlpdlfn"},{"post_id":"clen23zgb0008wfm0aocwcz7f","tag_id":"clen23zgf000zwfm0cg809ae3","_id":"clen23zgf0013wfm054mw19oa"},{"post_id":"clen23zgb0008wfm0aocwcz7f","tag_id":"clen23zgf0011wfm001826pcy","_id":"clen23zgf0014wfm00ucpgo83"}],"Tag":[{"name":"data mapper","_id":"clen23zga0005wfm0gxf50203"},{"name":"数据映射器","_id":"clen23zgc000bwfm0eafse2bg"},{"name":"领域模型","_id":"clen23zgd000ewfm09mrvea18"},{"name":"企业应用架构模式","_id":"clen23zge000iwfm0hwxog83w"},{"name":"alfred","_id":"clen23zge000kwfm00ltmd9ql"},{"name":"workflow","_id":"clen23zge000owfm0d66v0tgq"},{"name":"macos","_id":"clen23zge000rwfm07l1f1gym"},{"name":"ruby","_id":"clen23zge000swfm0aa12ghy6"},{"name":"event sourcing","_id":"clen23zge000twfm0c5dmh7oq"},{"name":"rails","_id":"clen23zgf000zwfm0cg809ae3"},{"name":"active record","_id":"clen23zgf0011wfm001826pcy"}]}}